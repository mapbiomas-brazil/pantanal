/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-58.52936205752952, -16.48069309590335],
          [-58.57330737002952, -17.101247170160555],
          [-58.32062182315452, -17.478882098612424],
          [-57.96905932315452, -17.656938725904308],
          [-57.77130541690452, -17.897558502926692],
          [-57.67242846377952, -18.273525077010646],
          [-57.94708666690452, -19.23060191352147],
          [-58.24371752627952, -19.71741814896459],
          [-58.29864916690452, -20.274912605306977],
          [-57.99103197940452, -20.96383809400686],
          [-58.07892260440452, -21.578107423128746],
          [-58.10089526065452, -22.230467998199895],
          [-57.41974291690452, -22.26097380469566],
          [-57.32086596377952, -21.88427321684344],
          [-57.11212572940452, -21.49635339908078],
          [-56.98028979190452, -21.056141489602602],
          [-56.82648119815452, -20.45000902167834],
          [-56.38702807315452, -20.48088774020802],
          [-55.89264330752952, -20.50147010055191],
          [-55.65094408877952, -20.50147010055191],
          [-55.10162768252952, -19.44829624235093],
          [-54.68414721377952, -18.482045076276716],
          [-54.68414721377952, -17.792981029318906],
          [-54.80499682315452, -17.048736849002278],
          [-54.82696947940452, -16.522828344097242],
          [-55.06866869815452, -16.217140881812828],
          [-55.50812182315452, -15.847575770994556],
          [-56.00250658877952, -15.604348700492018],
          [-56.71661791690452, -15.93210807445483],
          [-57.29889330752952, -15.805296326997492],
          [-57.95807299502952, -15.535558114006925],
          [-58.973632404627836, -15.897400514355134],
          [-59.290155580858844, -16.315729569211467]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// SCRIPT TO STABILIZE FOREST CLASSIFICATION AVOIDING FALSE DEFORESTATION AND FALSE REGENERATION

// step 1: mask of non forest in the first years to avoid false regeneration
var image = ee.Image('projects/mapbiomas-workspace/COLECAO8/classificacao-pantanal/PANT_col8_Anual_p10a_v6');
  
  var to_mask_1985 = image.select(['classification_1985']).eq(12)    
                .or(image.select(['classification_1985']).eq(21))
                .or(image.select(['classification_1985']).eq(19)).rename('mask_12_19_21').toByte().selfMask();   
  var to_mask_1986 = image.select(['classification_1986']).eq(12)    
                .or(image.select(['classification_1986']).eq(21))
                .or(image.select(['classification_1986']).eq(19)).rename('mask_12_19_21').toByte().selfMask();    
  var to_mask_1987 = image.select(['classification_1987']).eq(12)    
                .or(image.select(['classification_1987']).eq(21))
                .or(image.select(['classification_1987']).eq(19)).rename('mask_12_19_21').toByte().selfMask();    
  var to_mask_1988 = image.select(['classification_1988']).eq(12)    
                .or(image.select(['classification_1988']).eq(21))
                .or(image.select(['classification_1988']).eq(19)).rename('mask_12_19_21').toByte().selfMask();    

var mask_transicao = to_mask_1985.blend(to_mask_1986).blend(to_mask_1987).blend(to_mask_1988);

var mascara = mask_transicao.select('mask_12_19_21').remap([1],[100],0);
var col8 = image;
var class_outTotal = ee.Image();
var anos = [
            1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,
            2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,
            2012, 2013,2014,2015,2016,2017,2018,2019,2020,2021,2022
            ];

for (var i_ano=0;i_ano<anos.length; i_ano++){
  var ano = anos[i_ano];
  var class_corr = col8.select('classification_'+ano).add(mascara)
                         .remap([3,4,12,21,22,25,33,103,104,112,121,122,125,133],
                                [3,4,12,21,22,25,33, 4,  4, 12, 21, 22, 25, 33]);

  class_outTotal = class_outTotal.addBands(class_corr.rename('classification_'+ano));
var saida_ano = col8.select('classification_'+ano).blend(class_outTotal.select('classification_'+ano));

   if (i_ano === 0){ var class_outTotal2 = saida_ano}  
  else {class_outTotal2 = class_outTotal2.addBands(saida_ano)}
}


// sep 2: stabilizes forest areas across the series according to forest class in 2022 
var col8 = class_outTotal2;
var mascara = col8.select('classification_2022').eq(3).selfMask();
var floresta22 = mascara.remap([1],[100],0);
var class_outTotal = col8.select('classification_2022');
var anos = [
            1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,
            2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,
            2012, 2013,2014,2015,2016,2017,2018,2019,2020,2021
            ];
for (var i_ano=0;i_ano<anos.length; i_ano++){
  var ano = anos[i_ano];

  var class_corr = col8.select('classification_'+ano).add(floresta22)
                         .remap([3,4,12,19,21,22,25,33,103,104,112,119,121,122,125,133],
                                [3,4,12,19,21,22,25,33, 3,  3, 12, 19,  21, 22, 25, 33]).rename('classification_'+ano);

var saida_ano =  col8.select('classification_'+ano).blend(class_corr.select('classification_'+ano));

   if (i_ano === 0){ var class_outTotal2 = saida_ano} 
  else {class_outTotal2 = class_outTotal2.addBands(saida_ano)}
}

class_outTotal = class_outTotal.addBands(class_outTotal2);

var palettes = require('users/mapbiomas/modules:Palettes.js');
var vis = {
    'min': 0,
    'max': 62,
    'palette': palettes.get('classification7')
};

var years = [1985,1986,1987,1988,
             1995,1996,1997,1998,2002,
             2005,2006,2007,2008,
             2019,2020,2021,2022];

for (var i_year=0;i_year<years.length; i_year++){
  var year = years[i_year];
  
 Map.addLayer(col8.select('classification_'+year), vis, 'original '+year, false);
 Map.addLayer(class_outTotal.select('classification_'+year), vis, 'corrigido '+year, false);
}

// Step 3: stabilizes forest areas across the series according to forest class in 1985 
var col8 = class_outTotal;
var mascara = col8.select('classification_1985').eq(3);
var floresta85 = mascara.remap([1],[100],0);
var class_outTotal = col8.select('classification_1985');
var anos = [
            1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,
            2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,
            2012, 2013,2014,2015,2016,2017,2018,2019,2020,2021,2022
            ];

for (var i_ano=0;i_ano<anos.length; i_ano++){
  var ano = anos[i_ano];
  var class_corr = col8.select('classification_'+ano).add(floresta85)
                         .remap([3,4,12,19,21,22,25,33,103,104,112,119,121,122,125,133],
                                [4,4,12,19,21,22,25,33, 3 ,  4, 12, 19, 21, 22, 25, 33]).rename('classification_'+ano);

var saida_ano =  class_corr;

   if (i_ano === 0){ var class_outTotal2 = saida_ano} 
  else {class_outTotal2 = class_outTotal2.addBands(saida_ano)}
}
class_outTotal = class_outTotal.addBands(class_outTotal2);

// THREE YEAR MOVING WINDOW AND FILTER TO AVOID FALSE TRANSITIONS
// THIS SCRIPT ALSO CORRECTS FALSE FOREST AND SAVANNA OVER TIME SERIES  

// set output file
var vesion_in = '19';
var version_out = '20';
var descricao = 'Moving window filter fixes false transitions between classes over 3 years';
var col = 8.0;
var prefixo_in = 'PANT_col8_Anual_p13b_v';
var prefixo_out = 'PANT_col8_Anual_p15d_v';
var dirout = 'projects/mapbiomas-workspace/COLECAO8/classificacao-pantanal/';

// asset to apply the filter
var col8 = class_outTotal;

// visParams
var palettes = require('users/mapbiomas/modules:Palettes.js');
var vis = {
    'min': 0,
    'max': 62,
    'palette': palettes.get('classification7')
};


var anos = [
   2021, 2020,2019,2018,2017,2016,2015,2014,2013,
   2012,2011,2010,2009,2008,2007,2006,2005,2004,2003,2002,2001,
   2000,1999,1998,1997,1996,1995,1994,
   1993,1992,1991,1990,1989,1988,1987,1986
            ];

// three year moving window function
var window3years = function(imagem, classe){
   var class_final = imagem.select('classification_2022');
   for (var i_ano=0;i_ano<anos.length; i_ano++){
     var ano = anos[i_ano];
     var class_ano = imagem.select('classification_'+ano);
     var mask_3 = imagem.select('classification_'+ (ano + 1)).neq(classe)
                .and(imagem.select('classification_'+ (ano)).eq(classe))
                .and(imagem.select('classification_'+ (ano - 1)).neq(classe));
     mask_3 = imagem.select('classification_'+ (ano - 1)).remap([3,4,12,19,21],
                                                                [3,4,12,19,21])
                                                          .updateMask(mask_3);
     var class_corr = class_ano.blend(mask_3.rename('classification_'+ (ano)));
     class_final = class_final.addBands(class_corr);
   }
   class_final = class_final.addBands(imagem.select('classification_1985'));
   return class_final;
};

var filtered = window3years(col8, 12);
filtered = window3years(filtered, 3);
filtered = window3years(filtered, 4);
filtered = window3years(filtered, 21);
filtered = window3years(filtered, 19);


// resolves empty pixels in region transitions.
filtered = ee.Image('projects/mapbiomas-workspace/AMOSTRAS/col8/PANTANAL/PANT_col8_prob_reg0_v1').blend(filtered);

//stabilizes 1985 and 2022 after transitions filter in forest, savnna, grassland, pasture and agriculture classes
var col8_85 = filtered.select('classification_1985');
var col8_86 = filtered.select('classification_1986');
var col8_87 = filtered.select('classification_1987');
var col8_20 = filtered.select('classification_2020');
var col8_21 = filtered.select('classification_2021');
var col8_22 = filtered.select('classification_2022');

var corrigir85flo = col8_85.neq(3)
              .and(col8_86.eq(3))
              .and(col8_87.eq(3)).remap([1],[3],0).selfMask();
var corrigir22flo = col8_22.neq(3)
              .and(col8_21.eq(3))
              .and(col8_20.eq(3)).remap([1],[3],0).selfMask();
var corrigir85sav = col8_85.neq(4)
              .and(col8_86.eq(4))
              .and(col8_87.eq(4)).remap([1],[4],0).selfMask();
var corrigir22sav = col8_22.neq(4)
              .and(col8_21.eq(4))
              .and(col8_20.eq(4)).remap([1],[4],0).selfMask();
var corrigir85cam = col8_85.neq(12)
              .and(col8_86.eq(12))
              .and(col8_87.eq(12)).remap([1],[12],0).selfMask();
var corrigir22cam = col8_22.neq(12)
              .and(col8_21.eq(12))
              .and(col8_20.eq(12)).remap([1],[12],0).selfMask();
var corrigir85agr = col8_85.neq(19)
              .and(col8_86.eq(19))
              .and(col8_87.eq(19)).remap([1],[19],0).selfMask();
var corrigir22agr = col8_22.neq(19)
              .and(col8_21.eq(19))
              .and(col8_20.eq(19)).remap([1],[19],0).selfMask();
var corrigir85pas = col8_85.neq(21)
              .and(col8_86.eq(21))
              .and(col8_87.eq(21)).remap([1],[21],0).selfMask();
var corrigir22pas = col8_22.neq(21)
              .and(col8_21.eq(21))
              .and(col8_20.eq(21)).remap([1],[21],0).selfMask();

var mask85 = corrigir85flo.blend(corrigir85sav.blend(corrigir85cam.blend(corrigir85agr.blend(corrigir85pas))));
var mask22 = corrigir22flo.blend(corrigir22sav.blend(corrigir22cam.blend(corrigir22agr.blend(corrigir22pas))));

var corrigido85 = col8_85.blend(mask85).rename('classification_1985');
var corrigido22 = col8_22.blend(mask22).rename('classification_2022');

var bandNames =  ['classification_1986','classification_1987','classification_1988',
                  'classification_1989','classification_1990','classification_1991','classification_1992',
                  'classification_1993','classification_1994','classification_1995','classification_1996',
                  'classification_1997','classification_1998','classification_1999','classification_2000',
                  'classification_2001','classification_2002','classification_2003','classification_2004',
                  'classification_2005','classification_2006','classification_2007','classification_2008',
                  'classification_2009','classification_2010','classification_2011','classification_2012',
                  'classification_2013','classification_2014','classification_2015','classification_2016',
                  'classification_2017','classification_2018','classification_2019','classification_2020',
                  'classification_2021'];
                  
var colecao = filtered.select(bandNames);
var exportacao = colecao.addBands([corrigido85,corrigido22]);
var col8 = exportacao;

// stabilizes forest and savanna according to the first and last year
var to_mask_sav = col8.select('classification_1985').neq(3)
                .and(col8.select('classification_2022').eq(4)).remap([1],[100],0).toByte().selfMask();    

var anos = [
            1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,
            2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,
            2012, 2013,2014,2015,2016,2017,2018,2019,2020,2021,2022
            ];

for (var i_ano=0;i_ano<anos.length; i_ano++){
  var ano = anos[i_ano];

var class_corr_agr_ano = col8.select('classification_'+ano).add(to_mask_sav)
                         .remap([3,4,12,19,21,22,25,33,103,104,112,119,121,122,125,133],
                                [3,4,12,19,21,22,25,33,  4,  4, 12, 21, 21, 22, 25, 33]);

var saida_ano = col8.select('classification_'+ano).blend(class_corr_agr_ano.rename('classification_'+ano));

   if (i_ano == 0){ var class_outTotal2 = saida_ano}  
  else {class_outTotal2 = class_outTotal2.addBands(saida_ano)}
}

 var to_mask_flor = class_outTotal2.select('classification_1985').eq(3)
                .and(class_outTotal2.select('classification_2022').eq(3)).remap([1],[100],0).toByte().selfMask();

for (var i_ano=0;i_ano<anos.length; i_ano++){
  var ano = anos[i_ano];

var class_corr_agr_ano = class_outTotal2.select('classification_'+ano).add(to_mask_flor)
                         .remap([3,4,12,19,21,22,25,33,103,104,112,119,121,122,125,133],
                                [3,4,12,19,21,22,25,33,  3,  3, 12, 21, 21, 22, 25, 33]);

var saida_ano = class_outTotal2.select('classification_'+ano).blend(class_corr_agr_ano.rename('classification_'+ano));

if (i_ano == 0){ var class_outTotal3 = saida_ano}  
  else {class_outTotal3 = class_outTotal3.addBands(saida_ano)}
}
var col8 = class_outTotal3;

var anos = [
            1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,
            2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,
            2012, 2013,2014,2015,2016,2017,2018,2019,2020,2021,2022
            ];
 var to_mask_flor = col8.select('classification_1985').eq(3)
                .and(col8.select('classification_2022').eq(3)).remap([1],[100],0).toByte().selfMask();  

for (var i_ano=0;i_ano<anos.length; i_ano++){
  var ano = anos[i_ano];

var class_corr_agr_ano = col8.select('classification_'+ano).add(to_mask_flor)
                         .remap([3,4,12,19,21,22,25,33,103,104,112,119,121,122,125,133],
                                [3,4,12,19,21,22,25,33,  3,  3, 3, 3, 3, 3, 3, 3]);

var saida_ano = col8.select('classification_'+ano).blend(class_corr_agr_ano.rename('classification_'+ano));

   if (i_ano == 0){ var class_outTotal3 = saida_ano}  
  else {class_outTotal3 = class_outTotal3.addBands(saida_ano)}
}

 var to_mask_sav = class_outTotal3.select('classification_1985').eq(4)
                .and(class_outTotal3.select('classification_2022').eq(4)).remap([1],[100],0).toByte().selfMask();  

for (var i_ano=0;i_ano<anos.length; i_ano++){
  var ano = anos[i_ano];

var class_corr_agr_ano = class_outTotal3.select('classification_'+ano).add(to_mask_sav)
                         .remap([3,4,12,19,21,22,25,33,103,104,112,119,121,122,125,133],
                                [3,4,12,19,21,22,25,33,  4,  4, 12,  4, 21, 22, 25, 33]);


var saida_ano = class_outTotal3.select('classification_'+ano).blend(class_corr_agr_ano.rename('classification_'+ano));

if (i_ano == 0){ var class_outTotal4 = saida_ano}  
  else {class_outTotal4 = class_outTotal4.addBands(saida_ano)}
}

var maskflo22 = class_outTotal4.select('classification_2022').eq(3).remap([1],[100],0).toByte().selfMask();  

for (var i_ano=0;i_ano<anos.length; i_ano++){
  var ano = anos[i_ano];

var class_corr_agr_ano = class_outTotal4.select('classification_'+ano).add(maskflo22)
                         .remap([3,4,12,19,21,22,25,33,103,104,112,119,121,122,125,133],
                                [3,4,12,19,21,22,25,33,  3,  3,  3,  3,  3,  3,  3,  3]);

var saida_ano = class_outTotal4.select('classification_'+ano).blend(class_corr_agr_ano.rename('classification_'+ano));

   if (i_ano == 0){ var class_outTotal5 = saida_ano}  
  else {class_outTotal5 = class_outTotal5.addBands(saida_ano)}
}

var col8 = class_outTotal5;

//last temporal filter of 3 and 4 years to correct antripic classes

var col8_85_corr = col8.select('classification_1985');
 
var anos = [
   2021,2020,2019,2018,2017,2016,2015,2014,2013,
   2012,2011,2010,2009,2008,2007,2006,2005,2004,2003,2002,2001,
   2000,1999,1998,1997,1996,1995,1994,
   1993,1992,1991,1990,1989,1988,1987,1986
            ];

var window3years = function(imagem, classe){
   var class_final = imagem.select('classification_2022');
   for (var i_ano=0;i_ano<anos.length; i_ano++){
     var ano = anos[i_ano];
     var class_ano = imagem.select('classification_'+ano);
     var mask_3 = imagem.select('classification_'+ (ano + 1)).neq(classe)
                .and(imagem.select('classification_'+ (ano)).eq(classe))
                .and(imagem.select('classification_'+ (ano - 1)).neq(classe));
     mask_3 = imagem.select('classification_'+ (ano - 1)).remap([3,4,12,21],[3,4,12,21]).updateMask(mask_3);
     var class_corr = class_ano.blend(mask_3.rename('classification_'+ano));
     class_final = class_final.addBands(class_corr);
   }
   class_final = class_final.addBands(col8_85_corr);
   return class_final;
};

var filtered = window3years(col8, 3);
filtered = window3years(filtered,  4);
filtered = window3years(filtered, 12);
filtered = window3years(filtered, 21);
filtered = window3years(filtered, 19);


var anos = [
   2021,2019,2017,2015,
   2013,2011,2009,2007,2005,2003,
   2001,1999,1997,1995,
   1993,1991,1989,1987
            ];

var window4years = function(imagem, classe){
   var class_final = imagem.select('classification_2022');
   
   for (var i_ano=0;i_ano<anos.length; i_ano++){
     var ano = anos[i_ano];
     var class_ano = imagem.select('classification_'+ano);
     var mask_3 = imagem.select('classification_'+ (ano + 1)).neq(classe)
                .and(imagem.select('classification_'+ (ano)).eq(classe))
                .and(imagem.select('classification_'+ (ano - 1)).eq(classe))
                .and(imagem.select('classification_'+ (ano - 2)).neq(classe));
     mask_3 = imagem.select('classification_'+ (ano - 2)).remap([3,4,12,19,21],[3,4,12,19,21]).updateMask(mask_3);
     var class_corr = class_ano.blend(mask_3.rename('classification_'+ano));
     class_final = class_final.addBands(class_corr);
     var class_corr2 = imagem.select('classification_'+ (ano - 1)).blend(mask_3.rename('classification_'+ (ano - 1)));
     class_final = class_final.addBands(class_corr2);
   }
   class_final = class_final.addBands(imagem.select('classification_1986'));
   class_final = class_final.addBands(imagem.select('classification_1985'));
   return class_final;
};

filtered = window4years(filtered, 3);
filtered = window4years(filtered, 4);
filtered = window4years(filtered, 12);
filtered = window4years(filtered, 19);
filtered = window4years(filtered, 21);


var anos = [
   2020,2018,2016,2014,
   2012,2010,2008,2006,2004,2002,
   2000,1998,1996,
   1994,1992,1990,1988
            ];

var window4years2 = function(imagem, classe){
   var class_final2 = imagem.select('classification_2022');
   class_final2 = class_final2.addBands(imagem.select('classification_2021'));
   
   for (var i_ano=0;i_ano<anos.length; i_ano++){
     var ano = anos[i_ano];
     var class_ano = imagem.select('classification_'+ano);
     var mask_3 = imagem.select('classification_'+ (ano + 1)).neq(classe)
                .and(imagem.select('classification_'+ (ano)).eq(classe))
                .and(imagem.select('classification_'+ (ano - 1)).eq(classe))
                .and(imagem.select('classification_'+ (ano - 2)).neq(classe));
     mask_3 = imagem.select('classification_'+ (ano - 2)).remap([3,4,12,19,21],[3,4,12,19,21]).updateMask(mask_3);
     var class_corr = class_ano.blend(mask_3.rename('classification_'+ano));
     class_final2 = class_final2.addBands(class_corr);
     var class_corr2 = imagem.select('classification_'+ (ano - 1)).blend(mask_3.rename('classification_'+ (ano - 1)));
     class_final2 = class_final2.addBands(class_corr2);
   }   
   class_final2 = class_final2.addBands(imagem.select('classification_1986'));
   class_final2 = class_final2.addBands(imagem.select('classification_1985'));

   return class_final2;
};

filtered = window4years2(filtered, 3);
filtered = window4years2(filtered,  4);
filtered = window4years2(filtered, 19);
filtered = window4years2(filtered, 21);
filtered = window4years2(filtered, 12);

var mask_agro = filtered.select('classification_1987').eq(19)
                .and(filtered.select('classification_1986').eq(33)).remap([1],[33]).selfMask();

var corr_87 = filtered.select('classification_1987').blend(mask_agro).rename('classification_1987');

var bandNames =  ['classification_1985','classification_1986','classification_1988',
                  'classification_1989','classification_1990','classification_1991','classification_1992',
                  'classification_1993','classification_1994','classification_1995','classification_1996',
                  'classification_1997','classification_1998','classification_1999','classification_2000',
                  'classification_2001','classification_2002','classification_2003','classification_2004',
                  'classification_2005','classification_2006','classification_2007','classification_2008',
                  'classification_2009','classification_2010','classification_2011','classification_2012',
                  'classification_2013','classification_2014','classification_2015','classification_2016',
                  'classification_2017','classification_2018','classification_2019','classification_2020',
                  'classification_2021','classification_2022'];

filtered = filtered.select(bandNames).addBands(corr_87);

// export image
filtered = filtered
.set('territory', 'PANTANAL')
.set('biome', 'PANTANAL')
.set('source', 'arcplan')
.set('version', version_out)
.set('year', version_out)
.set('collection_id', col)
.set('description', descricao);

  print('Final export:',filtered);
  Export.image.toAsset({
    "image": filtered.toByte(),
    "description": prefixo_out+version_out,
    "assetId": dirout + prefixo_out+version_out,
    "scale": 30,
    "pyramidingPolicy": {
        '.default': 'mode'
    },
    "maxPixels": 1e13,
    "region": geometry
  });    
  
//Marcos Rosa, Eduardo Rosa, Mariana Dias
//Updated Jul 31, 2023 - MD - mariana@arcplan.com.br