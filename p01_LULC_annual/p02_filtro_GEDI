/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-58.52936205752952, -16.48069309590335],
          [-58.57330737002952, -17.101247170160555],
          [-58.32062182315452, -17.478882098612424],
          [-57.96905932315452, -17.656938725904308],
          [-57.77130541690452, -17.897558502926692],
          [-57.67242846377952, -18.273525077010646],
          [-57.94708666690452, -19.23060191352147],
          [-58.24371752627952, -19.71741814896459],
          [-58.29864916690452, -20.274912605306977],
          [-57.99103197940452, -20.96383809400686],
          [-58.07892260440452, -21.578107423128746],
          [-58.10089526065452, -22.230467998199895],
          [-57.41974291690452, -22.26097380469566],
          [-57.32086596377952, -21.88427321684344],
          [-57.11212572940452, -21.49635339908078],
          [-56.98028979190452, -21.056141489602602],
          [-56.82648119815452, -20.45000902167834],
          [-56.38702807315452, -20.48088774020802],
          [-55.89264330752952, -20.50147010055191],
          [-55.65094408877952, -20.50147010055191],
          [-55.10162768252952, -19.44829624235093],
          [-54.68414721377952, -18.482045076276716],
          [-54.68414721377952, -17.792981029318906],
          [-54.80499682315452, -17.048736849002278],
          [-54.82696947940452, -16.522828344097242],
          [-55.06866869815452, -16.217140881812828],
          [-55.50812182315452, -15.847575770994556],
          [-56.00250658877952, -15.604348700492018],
          [-56.71661791690452, -15.93210807445483],
          [-57.29889330752952, -15.805296326997492],
          [-57.95807299502952, -15.535558114006925],
          [-58.973632404627836, -15.897400514355134],
          [-59.290155580858844, -16.315729569211467]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Set the output version for the samples
var versao_out = '1';

// Set the output version for the stable samples
var versao_estavel = '2';

// Define the output directory for the exported samples
var dirout = 'projects/mapbiomas-workspace/AMOSTRAS/col9/PANTANAL/SAMPLES/';

// Load the biomes raster image and mask it to get only the Pantanal biome
var biomes = ee.Image('projects/mapbiomas-workspace/AUXILIAR/biomas-raster-41');
var bioma250mil_PANT = biomes.mask(biomes.eq(3));
Map.addLayer(bioma250mil_PANT);

// Import the palettes module and set visualization parameters for the classification image
var palettes = require('users/mapbiomas/modules:Palettes.js');
var vis = {
    'min': 0,
    'max': 62,
    'palette': palettes.get('classification7')
};

// Load the stable samples image from the asset
var mapa_estavel_col8 = ee.Image('projects/mapbiomas-workspace/AMOSTRAS/col9/PANTANAL/SAMPLES/PANT_amostras_estaveis85a22_col8_v1');
Map.addLayer(mapa_estavel_col8, vis, 'mapa_estavel_col8', false);

// Define the regions for sampling
var regioes = [geometry];

// Load the GEDI image and mask it to the Pantanal biome
var GEDI = ee.Image('users/potapovpeter/GEDI_V27/GEDI_SAM_v27').mask(biomes.eq(3)).rename('GEDI');
print("GEDI",GEDI);

// Set visualization parameters for the GEDI image
var imageVisGEDI = {"min": 0,"max": 15,"palette":["c9f5f1","#ffbeee","#daffe0","#c0debf","08ff04","#037e07","0b240a"]};
Map.addLayer(GEDI, imageVisGEDI,'GEDI', false);

// Loop through each region
for (var id in regioes){
  // Get the region ID
  var reg_id = parseInt(id) + 1;
  print(reg_id);

  // Get the current region
  var regiao = regioes[id];

  // Stratified sample the stable samples image based on the region and class values
  var training_estavel = mapa_estavel_col8.stratifiedSample({
    'numPoints': 0,
    'classBand': 'reference',
    'region': regiao,
    'classValues': [   3,   4,   12,   21,   33],
    'classPoints': [4000,8000, 4000, 4000, 4000],
    'scale': 30, 
    'seed': 1, 
    'geometries': true
  });

  // Clip the GEDI image to the current region
  GEDI = GEDI.clip(regiao).rename('GEDI');

  // Filter the stable samples based on the reference class
  var am_flo = training_estavel.filterMetadata('reference','equals',3);
  var am_sav = training_estavel.filterMetadata('reference','equals',4);
  var am_cam = training_estavel.filterMetadata('reference','equals',12);
  var am_agr = training_estavel.filterMetadata('reference','equals',21);
  var am_agu = training_estavel.filterMetadata('reference','equals',33);

  // Sample the GEDI image based on the filtered stable samples
  var am_flo_gedi = GEDI.sampleRegions({"collection": am_flo, "properties": ['reference'], "scale": 30, "geometries": true});
  var am_sav_gedi = GEDI.sampleRegions({"collection": am_sav, "properties": ['reference'], "scale": 30, "geometries": true});
  var am_cam_gedi = GEDI.sampleRegions({"collection": am_cam, "properties": ['reference'], "scale": 30, "geometries": true});
  var am_agr_gedi = GEDI.sampleRegions({"collection": am_agr, "properties": ['reference'], "scale": 30, "geometries": true});
  var am_agu_gedi = GEDI.sampleRegions({"collection": am_agu, "properties": ['reference'], "scale": 30, "geometries": true});

  // Filter the sampled GEDI points based on the GEDI values
  am_flo_gedi = am_flo_gedi.filterMetadata('GEDI','greater_than',6);
  am_sav_gedi = am_sav_gedi.filterMetadata('GEDI','greater_than',2).filterMetadata('GEDI','less_than',6);
  am_cam_gedi = am_cam_gedi.filterMetadata('GEDI','less_than',2);
  am_agr_gedi = am_agr_gedi.filterMetadata('GEDI','less_than',2);
  am_agu_gedi = am_agu_gedi.filterMetadata('GEDI','less_than',1);

  // Print the size of each filtered sample collection
  print('am_flo_gedi',am_flo_gedi.size());
  print('am_sav_gedi',am_sav_gedi.size());
  print('am_cam_gedi',am_cam_gedi.size());
  print('am_agr_gedi',am_agr_gedi.size());
  print('am_agu_gedi',am_agu_gedi.size());

  // Add the filtered samples to the map for visualization
  Map.addLayer(am_flo, {},'am_flo', false);
  Map.addLayer(am_flo_gedi, {},'am_flo_gedi', false);
  Map.addLayer(am_sav, {},'am_sav', false);
  Map.addLayer(am_sav_gedi, {},'am_sav_gedi', false);
  Map.addLayer(am_agu, {},'am_agu', false);
  Map.addLayer(am_agu_gedi, {},'am_agu_gedi', false);

  // Merge the filtered samples into a single collection
  var amostras_final = am_flo_gedi.merge(am_sav_gedi).merge(am_cam_gedi).merge(am_agr_gedi).merge(am_agu_gedi);

  // Export the final samples to an asset
  Export.table.toAsset(amostras_final, 'samples_stable_r'+reg_id+'_v'+versao_out, dirout+ 'samples_stable_r'+reg_id+'_v'+versao_out);
}


// stable samples through colections

// Set the output version for the samples
var versao_out = '1';

// Set the output version for the stable samples
var versao_estavel = '2';

// Define the output directory for the exported samples
var dirout = 'projects/mapbiomas-workspace/AMOSTRAS/col9/PANTANAL/SAMPLES/';

// Load the biomes raster image and mask it to get only the Pantanal biome
var biomes = ee.Image('projects/mapbiomas-workspace/AUXILIAR/biomas-raster-41');
var bioma250mil_PANT = biomes.mask(biomes.eq(3));
Map.addLayer(bioma250mil_PANT);

// Import the palettes module and set visualization parameters for the classification image
var palettes = require('users/mapbiomas/modules:Palettes.js');
var vis = {
    'min': 0,
    'max': 62,
    'palette': palettes.get('classification7')
};

// Load the stable samples image from the asset
var mapa_estavel_col8 = ee.Image('projects/mapbiomas-workspace/AMOSTRAS/col9/PANTANAL/SAMPLES/PANT_amostras_estaveis85a22_col8_v1');
Map.addLayer(mapa_estavel_col8, vis, 'mapa_estavel_col8', false);

// Define the regions for sampling
var regioes = [geometry];
// var regioes = [col6_r1];

// Load the GEDI image and mask it to the Pantanal biome
var GEDI = ee.Image('users/potapovpeter/GEDI_V27/GEDI_SAM_v27').mask(biomes.eq(3)).rename('GEDI');
print("GEDI",GEDI);

// Set visualization parameters for the GEDI image
var imageVisGEDI = {"min": 0,"max": 15,"palette":["c9f5f1","#ffbeee","#daffe0","#c0debf","08ff04","#037e07","0b240a"]};
Map.addLayer(GEDI, imageVisGEDI,'GEDI', false);

// Define the list of years for the analysis
var anos = ['1985','1986','1987','1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000','2001','2002','2003','2004','2005','2006','2007',
            '2008','2009','2010','2011','2012','2013','2014','2015','2016','2017','2018','2019','2020'];

// Loop through each region
for (var id in regioes){
  // Get the region ID
  var reg_id = parseInt(id) + 1;
  print(reg_id);

  // Get the current region
  var regiao = regioes[id];

  // Loop through each year
  for (var i_ano=0;i_ano<anos.length; i_ano++){
    // Get the current year
    var ano = anos[i_ano];

    // Load the stable samples image for the current year
    var imagem = ee.Image('projects/mapbiomas-workspace/AMOSTRAS/col9/PANTANAL/SAMPLES/PANT_amostras_estaveis_col678_v1').select('classification_'+ano).rename('reference');

    // Stratified sample the stable samples image based on the region and class values
    var training_estavel = imagem.stratifiedSample({
      'numPoints': 0,
      'classBand': 'reference',
      'region': regiao,
      'classValues': [   3,   4,   12,   21,   33],
      'classPoints': [4000,8000, 4000, 4000, 4000],
      'scale': 30, 
      'seed': 1, 
      'geometries': true
    });

    // Clip the GEDI image to the current region
    GEDI = GEDI.clip(regiao).rename('GEDI');

    // Filter the stable samples based on the reference class
    var am_flo = training_estavel.filterMetadata('reference','equals',3);
    var am_sav = training_estavel.filterMetadata('reference','equals',4);
    var am_cam = training_estavel.filterMetadata('reference','equals',12);
    var am_agr = training_estavel.filterMetadata('reference','equals',21);
    var am_agu = training_estavel.filterMetadata('reference','equals',33);

    // Sample the GEDI image based on the filtered stable samples
    var am_flo_gedi = GEDI.sampleRegions({"collection": am_flo, "properties": ['reference'], "scale": 30, "geometries": true});
    var am_sav_gedi = GEDI.sampleRegions({"collection": am_sav, "properties": ['reference'], "scale": 30, "geometries": true});
    var am_cam_gedi = GEDI.sampleRegions({"collection": am_cam, "properties": ['reference'], "scale": 30, "geometries": true});
    var am_agr_gedi = GEDI.sampleRegions({"collection": am_agr, "properties": ['reference'], "scale": 30, "geometries": true});
    var am_agu_gedi = GEDI.sampleRegions({"collection": am_agu, "properties": ['reference'], "scale": 30, "geometries": true});

    // Filter the sampled GEDI points based on the GEDI values
    am_flo_gedi = am_flo_gedi.filterMetadata('GEDI','greater_than',6);
    am_sav_gedi = am_sav_gedi.filterMetadata('GEDI','greater_than',2).filterMetadata('GEDI','less_than',6);
    am_cam_gedi = am_cam_gedi.filterMetadata('GEDI','less_than',2);
    am_agr_gedi = am_agr_gedi.filterMetadata('GEDI','less_than',2);
    am_agu_gedi = am_agu_gedi.filterMetadata('GEDI','less_than',1);

    // Print the size of each filtered sample collection
    print('am_flo_gedi '+ano,am_flo_gedi.size());
    print('am_sav_gedi '+ano,am_sav_gedi.size());
    print('am_cam_gedi '+ano,am_cam_gedi.size());
    print('am_agr_gedi '+ano,am_agr_gedi.size());
    print('am_agu_gedi '+ano,am_agu_gedi.size());

    // Add the filtered samples to the map for visualization
    Map.addLayer(am_flo, {},'am_flo '+ano, false);
    Map.addLayer(am_flo_gedi, {},'am_flo_gedi '+ano, false);
    Map.addLayer(am_sav, {},'am_sav '+ano, false);
    Map.addLayer(am_sav_gedi, {},'am_sav_gedi '+ano, false);
    Map.addLayer(am_agu, {},'am_agu '+ano, false);
    Map.addLayer(am_agu_gedi, {},'am_agu_gedi '+ano, false);

    // Merge the filtered samples into a single collection
    var amostras_final = am_flo_gedi.merge(am_sav_gedi).merge(am_cam_gedi).merge(am_agr_gedi).merge(am_agu_gedi);

    // Export the final samples to an asset
    Export.table.toAsset(amostras_final, 'samples_stable678_r'+reg_id+'_v'+versao_out+'_'+ano, dirout+ 'samples_stable678_r'+reg_id+'_v'+versao_out+'_'+ano);
  }
}

//Developed by ArcPlan Team
//Marcos Rosa, Eduardo Rosa, Mariana Dias
//Updated July 2024 - MD - mariana@arcplan.com.br
