/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-58.52936205752952, -16.48069309590335],
          [-58.57330737002952, -17.101247170160555],
          [-58.32062182315452, -17.478882098612424],
          [-57.96905932315452, -17.656938725904308],
          [-57.77130541690452, -17.897558502926692],
          [-57.67242846377952, -18.273525077010646],
          [-57.94708666690452, -19.23060191352147],
          [-58.24371752627952, -19.71741814896459],
          [-58.29864916690452, -20.274912605306977],
          [-57.99103197940452, -20.96383809400686],
          [-58.07892260440452, -21.578107423128746],
          [-58.10089526065452, -22.230467998199895],
          [-57.41974291690452, -22.26097380469566],
          [-57.32086596377952, -21.88427321684344],
          [-57.11212572940452, -21.49635339908078],
          [-56.98028979190452, -21.056141489602602],
          [-56.82648119815452, -20.45000902167834],
          [-56.38702807315452, -20.48088774020802],
          [-55.89264330752952, -20.50147010055191],
          [-55.65094408877952, -20.50147010055191],
          [-55.10162768252952, -19.44829624235093],
          [-54.68414721377952, -18.482045076276716],
          [-54.68414721377952, -17.792981029318906],
          [-54.80499682315452, -17.048736849002278],
          [-54.82696947940452, -16.522828344097242],
          [-55.06866869815452, -16.217140881812828],
          [-55.50812182315452, -15.847575770994556],
          [-56.00250658877952, -15.604348700492018],
          [-56.71661791690452, -15.93210807445483],
          [-57.29889330752952, -15.805296326997492],
          [-57.95807299502952, -15.535558114006925],
          [-58.973632404627836, -15.897400514355134],
          [-59.290155580858844, -16.315729569211467]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Load the biomes 250k feature collection
var bioma250mil = ee.FeatureCollection('projects/mapbiomas-workspace/AUXILIAR/biomas_IBGE_250mil');

// Filter the feature collection to get the Pantanal biome
var bioma250mil_PA_vetor = bioma250mil.filterMetadata('Bioma','equals', 'Pantanal');

// Create a blank image with a mask
var blank = ee.Image(0).mask(0);

// Paint the outline of the Pantanal biome on the blank image
var outline = blank.paint(bioma250mil_PA_vetor, 'AA0000', 2); 

// Set visualization parameters for the outline
var visPar = {'palette':'000000','opacity': 0.6};

// Add the outline to the map
Map.addLayer(outline, visPar, 'bimoa250mil', false);

// Set the limit to the Pantanal biome feature collection
var limite = bioma250mil_PA_vetor

// Load the biomes raster image
var biomes = ee.Image('projects/mapbiomas-workspace/AUXILIAR/biomas-raster-41');

// Mask the biomes image to get only the Pantanal biome
var bioma_Pantanl = biomes.mask(biomes.eq(3));

// Set the year for the analysis
var year = 2022;

// Import the palettes module
var palettes = require('users/mapbiomas/modules:Palettes.js');

// Set visualization parameters for the classification image
var vis = {
        'min': 0,
        'max': 62,
        'palette': palettes.get('classification7'),
        'format': 'png'
};

// Set the asset ID for the biomes raster
var assetBiomes = 'projects/mapbiomas-workspace/AUXILIAR/biomas-raster';

// Set the output directory for the exported image
var dirout = 'projects/mapbiomas-workspace/AMOSTRAS/col9/PANTANAL/SAMPLES/'

// Load the biomes raster image
var biomes = ee.Image(assetBiomes);

// Set the output version
var version_out = '1';

// Set the asset ID for the collection 8 image
var asset_col8 = 'projects/mapbiomas-workspace/public/collection8/mapbiomas_collection80_integration_v1';

// Load the collection 8 image
var class_col8 = ee.Image(asset_col8);

// Clip the collection 8 image to the Pantanal biome
var class_col8_region = class_col8.clip(limite);

// Add the clipped collection 8 image to the map
Map.addLayer(class_col8_region.select('classification_2022'), vis, 'Classes ORIGINAIS 2022', false);

// Define the list of years for the analysis
var anos = ['1985','1986','1987','1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000','2001','2002','2003','2004','2005','2006','2007',
            '2008','2009','2010','2011','2012','2013','2014','2015','2016','2017','2018','2019','2020','2021','2022'];

// Create a list of images for each year
var colList = anos.map(function (year) {
        // Select the classification band for the current year
        var image = class_col8_region.select('classification_'+year);

        // Remap the classification values
        image = image.remap(
                  [3, 4, 5, 9,11,12,13,15,18,19,20,36,39,41,21,22,23,24,25,26,29,30,31,32,33],
                  [3, 4, 3, 9,12,12,13,21,21,21,21,21,21,21,21,25,25,25,25,33,29,22,12,12,33]);

        // Convert the image to int8
        return image.int8();
    }
);

// Print the list of images
print(colList);

// Create an image collection from the list of images
var collection = ee.ImageCollection(colList);

// Define a function to get unique values from an array
var unique = function(arr) {
    var u = {},
        a = [];
    for (var i = 0, l = arr.length; i < l; ++i) {
        if (!u.hasOwnProperty(arr[i])) {
            a.push(arr[i]);
            u[arr[i]] = 1;
        }
    }
    return a;
};

/**
 * REFERENCE MAP
 */

// Define a function to get the frequency mask for a given class ID
var getFrenquencyMask = function(collection, classId) {

    // Convert the class ID to an integer
    var classIdInt = parseInt(classId, 10);

    // Create a collection of masks for the given class ID
    var maskCollection = collection.map(function(image) {
        return image.eq(classIdInt);
    });

    // Calculate the frequency of the class ID
    var frequency = maskCollection.reduce(ee.Reducer.sum());

    // Create a mask for the frequency threshold
    var frequencyMask = frequency.gte(classFrequency[classId])
        .multiply(classIdInt)
        .toByte();

    // Mask the frequency mask to only include the class ID
    frequencyMask = frequencyMask.mask(frequencyMask.eq(classIdInt));

    // Rename the frequency mask and set the class ID
    return frequencyMask.rename('frequency').set('class_id', classId);
};

// Define the frequency threshold for each class ID
var classFrequency = {"3": 38, "4": 38, "9": 38, "12": 38,"13": 38, "21": 38, "25": 38, "29": 38, "33": 38};

// Create a list of frequency masks for each class ID
var frequencyMasks = Object.keys(classFrequency).map(function(classId) {
    return getFrenquencyMask(collection, classId);
});

// Create an image collection from the list of frequency masks
frequencyMasks = ee.ImageCollection.fromImages(frequencyMasks);

// Reduce the image collection to get the first non-null value for each pixel
var referenceMap = frequencyMasks.reduce(ee.Reducer.firstNonNull()).clip(geometry);

// Mask the reference map to remove the value 38
referenceMap = referenceMap.mask(referenceMap.neq(28)).rename("reference");

// Set visualization parameters for the reference map
var vis = {
    'min': 0,
    'max': 62,
    'palette': palettes.get('classification8')
};

// Add the reference map to the map
Map.addLayer(referenceMap, vis, 'Classes persistentes 85 a 22', true);

// Export the reference map to an asset
Export.image.toAsset({
    "image": referenceMap.toInt8(),
    "description": 'PANT_amostras_estaveis85a22_col8_v'+version_out,
    "assetId": dirout + 'PANT_amostras_estaveis85a22_col8_v'+version_out,
    "scale": 30,
    "pyramidingPolicy": {
        '.default': 'mode'
    },
    "maxPixels": 1e13,
    "region": geometry
});  



// Set the asset ID for the collection 8 image
var asset_col8 = 'projects/mapbiomas-workspace/public/collection8/mapbiomas_collection80_integration_v1';

// Load the collection 8 image
var class_col8 = ee.Image(asset_col8);

// Clip the collection 8 image to the Pantanal biome
var class_col8_region = class_col8.clip(limite);

// Add the clipped collection 8 image to the map
Map.addLayer(class_col8_region.select('classification_2022'), vis, 'Classes ORIGINAIS 2022', false);

// Set the asset ID for the collection 7.1 image
var asset_col71 = 'projects/mapbiomas-workspace/public/collection7_1/mapbiomas_collection71_integration_v1';

// Load the collection 7.1 image
var class_col71 = ee.Image(asset_col71);

// Clip the collection 7.1 image to the Pantanal biome
var class_col71_region = class_col71.clip(limite);

// Set the asset ID for the collection 6 image
var asset_col6 = 'projects/mapbiomas-workspace/public/collection6/mapbiomas_collection60_integration_v1';

// Load the collection 6 image
var class_col6 = ee.Image(asset_col6);

// Clip the collection 6 image to the Pantanal biome
var class_col6_region = class_col6.clip(limite);

// Define the list of years for the analysis
var anos = ['1985','1986','1987','1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000','2001','2002','2003','2004','2005','2006','2007',
            '2008','2009','2010','2011','2012','2013','2014','2015','2016','2017','2018','2019','2020'];

// Loop through each year
for (var i_ano=0;i_ano<anos.length; i_ano++){
  // Get the current year
  var ano = anos[i_ano];

  // Remap the classification values for each collection
  var image8 = class_col8_region.select('classification_'+ano).remap(
                  [3, 4, 5, 9,11,12,13,15,18,19,20,36,39,41,21,22,23,24,25,26,29,30,31,32,33],
                  [3, 4, 3, 9,12,12,13,21,21,21,21,21,21,21,21,25,25,25,25,33,29,22,12,12,33]);
  var image7 = class_col71_region.select('classification_'+ano).remap(
                  [3, 4, 5, 9,11,12,13,15,18,19,20,36,39,41,21,22,23,24,25,26,29,30,31,32,33],
                  [3, 4, 3, 9,12,12,13,21,21,21,21,21,21,21,21,25,25,25,25,33,29,22,12,12,33]);          
  var image6 = class_col6_region.select('classification_'+ano).remap(
                  [3, 4, 5, 9,11,12,13,15,18,19,20,36,39,41,21,22,23,24,25,26,29,30,31,32,33],
                  [3, 4, 3, 9,12,12,13,21,21,21,21,21,21,21,21,25,25,25,25,33,29,22,12,12,33]);          

  // Create masks to identify consistent classifications across collections
  var teste = image8.eq(image7);
  var teste1 = image8.mask(teste);
  var teste2 = teste1.eq(image6).selfMask();
  var teste3 = image8.mask(teste2).selfMask().rename('classification_'+ano);

  // Add the images to the map for visualization
  Map.addLayer(image6, vis, 'image6 '+ano, false);  
  Map.addLayer(image7, vis, 'image7 '+ano, false);  
  Map.addLayer(image8, vis, 'image8 '+ano, false);    
  Map.addLayer(teste2, vis, 'test '+ano, false);       
  Map.addLayer(teste3, vis, 'mask Final '+ano, false);   

  // Combine the masks into a single image
  if (i_ano == 0){ 
    var asset_mask = teste3;
  }  
  else {
    asset_mask = asset_mask.addBands(teste3);
  }
}

// Print the combined mask image
print(asset_mask);

// Export the combined mask image to an asset
Export.image.toAsset({
    "image": asset_mask.toInt8(),
    "description": 'PANT_amostras_estaveis_col678_v'+version_out,
    "assetId": dirout + 'PANT_amostras_estaveis_col678_v'+version_out,
    "scale": 30,
    "pyramidingPolicy": {
        '.default': 'mode'
    },
    "maxPixels": 1e13,
    "region": geometry
});  

//Developed by ArcPlan Team
//Marcos Rosa, Eduardo Rosa, Mariana Dias
//Updated July 2024 - MD - mariana@arcplan.com.br