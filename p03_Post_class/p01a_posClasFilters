/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var teste = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Point([-57.331256885851836, -17.31618223005804]),
    geometry = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-58.52936205752952, -16.48069309590335],
          [-58.57330737002952, -17.101247170160555],
          [-58.32062182315452, -17.478882098612424],
          [-57.96905932315452, -17.656938725904308],
          [-57.77130541690452, -17.897558502926692],
          [-57.67242846377952, -18.273525077010646],
          [-57.94708666690452, -19.23060191352147],
          [-58.24371752627952, -19.71741814896459],
          [-58.29864916690452, -20.274912605306977],
          [-57.99103197940452, -20.96383809400686],
          [-58.07892260440452, -21.578107423128746],
          [-58.10089526065452, -22.230467998199895],
          [-57.41974291690452, -22.26097380469566],
          [-57.32086596377952, -21.88427321684344],
          [-57.11212572940452, -21.49635339908078],
          [-56.98028979190452, -21.056141489602602],
          [-56.82648119815452, -20.45000902167834],
          [-56.38702807315452, -20.48088774020802],
          [-55.89264330752952, -20.50147010055191],
          [-55.65094408877952, -20.50147010055191],
          [-55.10162768252952, -19.44829624235093],
          [-54.68414721377952, -18.482045076276716],
          [-54.68414721377952, -17.792981029318906],
          [-54.80499682315452, -17.048736849002278],
          [-54.82696947940452, -16.522828344097242],
          [-55.06866869815452, -16.217140881812828],
          [-55.50812182315452, -15.847575770994556],
          [-56.00250658877952, -15.604348700492018],
          [-56.71661791690452, -15.93210807445483],
          [-57.29889330752952, -15.805296326997492],
          [-57.95807299502952, -15.535558114006925],
          [-58.973632404627836, -15.897400514355134],
          [-59.290155580858844, -16.315729569211467]]]),
    imageVisParam = {"opacity":1,"palette":["ffffff","ff0000"]},
    geometry2 = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry.MultiPoint(
        [[-55.54394437576341, -18.640066764471285],
         [-57.05273590386484, -19.14667179927751]]),
    table = ee.FeatureCollection("users/gee_arcplan/col8/alertas_pantanal");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
////// Resolve empty pixels that the first fillGAP didn't fix
var palettes = require('users/mapbiomas/modules:Palettes.js');
var vis = {
    'min': 0,
    'max': 45,
    'palette': palettes.get('classification5')
};

// Load the Collection 9 classification image (p02c_v02)
var col9 = ee.Image('projects/mapbiomas-workspace/COLECAO9/classificacao-pantanal/PANT_col9_Anual_p02c_v02')
print(col9)

// Only where it's anthropogenic
/////// Stabilize 1985 and 2022

// Select bands for each year
var col9_85 = col9.select('classification_1985')
var col9_86 = col9.select('classification_1986')
var col9_87 = col9.select('classification_1987')
var col9_88 = col9.select('classification_1988')
var col9_89 = col9.select('classification_1989')
var col9_90 = col9.select('classification_1990')
var col9_91 = col9.select('classification_1991')
var col9_92 = col9.select('classification_1992')
var col9_93 = col9.select('classification_1993')
var col9_94 = col9.select('classification_1994')
var col9_95 = col9.select('classification_1995')
var col9_96 = col9.select('classification_1996')

var col9_18 = col9.select('classification_2018')
var col9_19 = col9.select('classification_2019')
var col9_20 = col9.select('classification_2020')
var col9_21 = col9.select('classification_2021')
var col9_22 = col9.select('classification_2022')
var col9_23 = col9.select('classification_2023')

// Correct 1994: If 1994 is pasture and 1995 and 1996 are forest, then 1994 is forest
var corrigir94flo = col9_94.eq(21)
              .and(col9_95.eq(3).and(col9_96.eq(3))).remap([1],[3],0).selfMask()
// Correct 1994: If 1994 is pasture and 1995 or 1996 are savanna, then 1994 is savanna
var corrigir94sav = col9_94.eq(21)
              .and(col9_95.eq(4).or(col9_96.eq(4))).remap([1],[4],0).selfMask()              
// Create a mask for 1994, correcting pasture to forest or savanna
var mask94 = corrigir94sav.blend(corrigir94flo.blend(col9_94.eq(3).remap([1],[3],0).selfMask())).mask(col9_94.eq(21)).selfMask()

// Blend the original 1994 with the corrected mask
var corrigido94 = col9_94.blend(mask94).rename('classification_1994')

// Display the original and corrected 1994
Map.addLayer(col9_94,vis,'Original 94',false)
Map.addLayer(corrigido94,vis,'corrigido 94',false)

// Update col9_94 with the corrected image
col9_94 = corrigido94   

// Repeat the correction process for years 1993 to 1990
var corrigir93flo = col9_93.eq(21)
              .and(col9_94.eq(3).and(col9_95.eq(3))).remap([1],[3],0).selfMask()
var corrigir93sav = col9_93.eq(21)
              .and(col9_94.eq(4).or(col9_95.eq(4))).remap([1],[4],0).selfMask()              
var mask93 = corrigir93sav.blend(corrigir93flo.blend(col9_93.eq(3).remap([1],[3],0).selfMask())).mask(col9_93.eq(21)).selfMask()
var corrigido93 = col9_93.blend(mask93).rename('classification_1993')
Map.addLayer(col9_93,vis,'Original 93',false)
Map.addLayer(corrigido93,vis,'corrigido 93',false)
col9_93 = corrigido93  

var corrigir92flo = col9_92.eq(21)
              .and(col9_93.eq(3).and(col9_94.eq(3))).remap([1],[3],0).selfMask()
var corrigir92sav = col9_92.eq(21)
              .and(col9_93.eq(4).or(col9_94.eq(4))).remap([1],[4],0).selfMask()              
var mask92 = corrigir92sav.blend(corrigir92flo.blend(col9_92.eq(3).remap([1],[3],0).selfMask())).mask(col9_92.eq(21)).selfMask()
var corrigido92 = col9_92.blend(mask92).rename('classification_1992')
Map.addLayer(col9_92,vis,'Original 92',false)
Map.addLayer(corrigido92,vis,'corrigido 92',false)
col9_92 = corrigido92  

var corrigir91flo = col9_91.eq(21)
              .and(col9_92.eq(3).and(col9_93.eq(3))).remap([1],[3],0).selfMask()
var corrigir91sav = col9_91.eq(21)
              .and(col9_92.eq(4).or(col9_93.eq(4))).remap([1],[4],0).selfMask()              
var mask91 = corrigir91sav.blend(corrigir91flo.blend(col9_91.eq(3).remap([1],[3],0).selfMask())).mask(col9_91.eq(21)).selfMask()
var corrigido91 = col9_91.blend(mask91).rename('classification_1991')
Map.addLayer(col9_91,vis,'Original 91',false)
Map.addLayer(corrigido91,vis,'corrigido 91',false)
col9_91 = corrigido91  

var corrigir90flo = col9_90.eq(21)
              .and(col9_91.eq(3).and(col9_92.eq(3))).remap([1],[3],0).selfMask()
var corrigir90sav = col9_90.eq(21)
              .and(col9_91.eq(4).or(col9_92.eq(4))).remap([1],[4],0).selfMask()              
var mask90 = corrigir90sav.blend(corrigir90flo.blend(col9_90.eq(3).remap([1],[3],0).selfMask())).mask(col9_90.eq(21)).selfMask()
var corrigido90 = col9_90.blend(mask90).rename('classification_1990')
Map.addLayer(col9_90,vis,'Original 90',false)
Map.addLayer(corrigido90,vis,'corrigido 90',false)
col9_90 = corrigido90  

// Correct 1989: If 1989 is pasture and 1990 and 1991 are forest, then 1989 is forest
var corrigir89flo = col9_89.eq(21)
              .and(col9_90.eq(3).and(col9_91.eq(3))).remap([1],[3],0).selfMask()
// Correct 1989: If 1989 is pasture and 1990 or 1991 are savanna, then 1989 is savanna
var corrigir89sav = col9_89.eq(21)
              .and(col9_90.eq(4).or(col9_91.eq(4))).remap([1],[4],0).selfMask()              
// Create a mask for 1989, correcting pasture to forest or savanna
var mask89 = corrigir89sav.blend(corrigir89flo.blend(col9_89.eq(3).remap([1],[3],0).selfMask())).mask(col9_89.eq(21)).selfMask()
// Blend the original 1989 with the corrected mask
var corrigido89 = col9_89.blend(mask89).rename('classification_1989')
// Display the original and corrected 1989
Map.addLayer(col9_89,vis,'Original 89',false)
Map.addLayer(corrigido89,vis,'corrigido 89',false)
col9_89 = corrigido89  

// Correct 1988: If 1988 is pasture and 1989 and 1990 are forest, then 1988 is forest
var corrigir88flo = col9_88.eq(21)
              .and(col9_89.eq(3).and(col9_90.eq(3))).remap([1],[3],0).selfMask()
// Correct 1988: If 1988 is pasture and 1989 or 1990 are savanna, then 1988 is savanna
var corrigir88sav = col9_88.eq(21)
              .and(col9_89.eq(4).or(col9_90.eq(4))).remap([1],[4],0).selfMask()              
// Create a mask for 1988, correcting pasture to forest or savanna
var mask88 = corrigir88sav.blend(corrigir88flo.blend(col9_88.eq(3).remap([1],[3],0).selfMask())).mask(col9_88.eq(21)).selfMask()
// Blend the original 1988 with the corrected mask
var corrigido88 = col9_88.blend(mask88).rename('classification_1988')
// Display the original and corrected 1988
Map.addLayer(col9_88,vis,'Original 88',false)
Map.addLayer(corrigido88,vis,'corrigido 88',false)
col9_88 = corrigido88  

// Correct 1987: If 1987 is pasture and 1988 and 1989 are forest, then 1987 is forest
var corrigir87flo = col9_87.eq(21)
              .and(col9_88.eq(3).and(col9_89.eq(3))).remap([1],[3],0).selfMask()
// Correct 1987: If 1987 is pasture and 1988 or 1989 are savanna, then 1987 is savanna
var corrigir87sav = col9_87.eq(21)
              .and(col9_88.eq(4).or(col9_89.eq(4))).remap([1],[4],0).selfMask()              
// Create a mask for 1987, correcting pasture to forest or savanna
var mask87 = corrigir87sav.blend(corrigir87flo.blend(col9_87.eq(3).remap([1],[3],0).selfMask())).mask(col9_87.eq(21)).selfMask()
// Blend the original 1987 with the corrected mask
var corrigido87 = col9_87.blend(mask87).rename('classification_1987')
// Display the original and corrected 1987
Map.addLayer(col9_87,vis,'Original 87',false)
Map.addLayer(corrigido87,vis,'corrigido 87',false)
col9_87 = corrigido87  

// Correct 1986: If 1986 is pasture and 1987 and 1988 are forest, then 1986 is forest
var corrigir86flo = col9_86.eq(21)
              .and(col9_87.eq(3).and(col9_88.eq(3))).remap([1],[3],0).selfMask()
// Correct 1986: If 1986 is pasture and 1987 or 1988 are savanna, then 1986 is savanna
var corrigir86sav = col9_86.eq(21)
              .and(col9_87.eq(4).or(col9_88.eq(4))).remap([1],[4],0).selfMask()              
// Create a mask for 1986, correcting pasture to forest or savanna
var mask86 = corrigir86sav.blend(corrigir86flo.blend(col9_86.eq(3).remap([1],[3],0).selfMask())).mask(col9_86.eq(21)).selfMask()
// Blend the original 1986 with the corrected mask
var corrigido86 = col9_86.blend(mask86).rename('classification_1986')
// Display the original and corrected 1986
Map.addLayer(col9_86,vis,'Original 86',false)
Map.addLayer(corrigido86,vis,'corrigido 86',false)
col9_86 = corrigido86   

// Correct 1985: If 1985 is pasture and 1986 or 1987 are forest, then 1985 is forest
var corrigir85flo = col9_85.eq(21)
              .and(col9_86.eq(3).or(col9_87.eq(3))).remap([1],[3],0).selfMask()
// Correct 1985: If 1985 is pasture and 1986 or 1987 are savanna, then 1985 is savanna
var corrigir85sav = col9_85.eq(21)
              .and(col9_86.eq(4).or(col9_87.eq(4))).remap([1],[4],0).selfMask()

// Create a mask for 1985, correcting pasture to forest or savanna
var mask85 = corrigir85flo.blend(corrigir85sav.blend(col9_85.eq(4).remap([1],[4],0).selfMask())).mask(col9_85.eq(21)).selfMask()
// Blend the original 1985 with the corrected mask
var corrigido85 = col9_85.blend(mask85).rename('classification_1985')
// Display the corrected 1985
Map.addLayer(corrigido85,vis,'corrigido2 85',false)

// Correct 1985 again: If 1985 is pasture and 1986 or 1987 are forest, then 1985 is forest
var corrigir85flo = col9_85.eq(21)
              .and(col9_86.eq(3).or(col9_87.eq(3))).remap([1],[3],0).selfMask()
// Correct 1985 again: If 1985 is pasture and 1986 or 1987 are savanna, then 1985 is savanna
var corrigir85sav = col9_85.eq(21)
              .and(col9_86.eq(4).or(col9_87.eq(4))).remap([1],[4],0).selfMask()

// Create a mask for 1985, correcting pasture to forest or savanna
var  mask85 = corrigido85.blend(corrigir85sav.blend(corrigir85flo.blend(col9_85.eq(3).remap([1],[3],0).selfMask())).mask(col9_85.eq(4).or(col9_85.eq(12)).or(col9_85.eq(21)))).selfMask().rename('classification_1985')

// Blend the original 1985 with the corrected mask
var corrigido85 = corrigido85.blend(mask85).rename('classification_1985')

// Display the original and corrected 1985
Map.addLayer(corrigido85,vis,'corrigido3 85',false)
Map.addLayer(col9_85,vis,'Original 85',false)

// Update col9_85 with the corrected image
col9_85 = corrigido85   

// Test for specific conditions
var testessss = col9_86.eq(3).and(col9_85.eq(12)).remap([1],[4],0).selfMask()
var testessss2 = col9_86.eq(3).and(col9_85.eq(4)).remap([1],[3],0).selfMask()
var testessss3 = col9_85.blend(testessss).blend(testessss2).rename('classification_1985')
Map.addLayer(testessss3,vis,'corrigido4 85',false)
col9_85 = testessss3
corrigido85 = testessss3

// Define the asset path for the Collection 9 mosaics
var asset_mosaicos_col9 = 'projects/nexgenmap/MapBiomas2/LANDSAT/BRAZIL/mosaics-2';

// Create a mosaic for 1985
var mosaicoTotal = ee.ImageCollection(asset_mosaicos_col9)
                        .filterMetadata('biome', 'equals', 'PANTANAL')
                        .filterMetadata('year', 'equals', 1985)
 //                       .filter(ee.Filter.eq('satellite', asset1))
                        .filterBounds(geometry)
                        .mosaic()
Map.addLayer(mosaicoTotal, {bands: ['swir1_median', 'nir_median', 'red_median'],gain: [0.08, 0.06, 0.2],gamma: 0.85}, 'mosaico 1985', false) 

// Load the palettes module and define visualization parameters
var palettes = require('users/mapbiomas/modules:Palettes.js');
var vis = {
    'min': 0,
    'max': 45,
    'palette': palettes.get('classification5')
};

// Create a mosaic for 1986
var mosaicoTotal = ee.ImageCollection(asset_mosaicos_col9)
                        .filterMetadata('biome', 'equals', 'PANTANAL')
                        .filterMetadata('year', 'equals', 1986)
 //                       .filter(ee.Filter.eq('satellite', asset1))
                        .filterBounds(geometry)
                        .mosaic()
Map.addLayer(mosaicoTotal, {bands: ['swir1_median', 'nir_median', 'red_median'],gain: [0.08, 0.06, 0.2],gamma: 0.85}, 'mosaico 1986', false) 

// Display the original and corrected 1986
Map.addLayer(col9_86,vis,'Original 86',false)
Map.addLayer(corrigido86,vis,'corrigido 86',false)

// Create a mosaic for 1987
var mosaicoTotal = ee.ImageCollection(asset_mosaicos_col9)
                        .filterMetadata('biome', 'equals', 'PANTANAL')
                        .filterMetadata('year', 'equals', 1987)
 //                       .filter(ee.Filter.eq('satellite', asset1))
                        .filterBounds(geometry)
                        .mosaic()
Map.addLayer(mosaicoTotal, {bands: ['swir1_median', 'nir_median', 'red_median'],gain: [0.08, 0.06, 0.2],gamma: 0.85}, 'mosaico 1987', false) 

// Display the original images for 1987, 1988, and 1989
Map.addLayer(col9_87,vis,'Original 87',false)             
Map.addLayer(col9_88,vis,'Original 88',false) 
Map.addLayer(col9_89,vis,'Original 89',false)  

// Create a mosaic for 1992
var mosaicoTotal = ee.ImageCollection(asset_mosaicos_col9)
                        .filterMetadata('biome', 'equals', 'PANTANAL')
                        .filterMetadata('year', 'equals', 1992)
 //                       .filter(ee.Filter.eq('satellite', asset1))
                        .filterBounds(geometry)
                        .mosaic()
Map.addLayer(mosaicoTotal, {bands: ['swir1_median', 'nir_median', 'red_median'],gain: [0.08, 0.06, 0.2],gamma: 0.85}, 'mosaico 1992', false) 

// Display the original 1992
Map.addLayer(col9_92,vis,'Original 92',false)  

// Create a mosaic for 1993
var mosaicoTotal = ee.ImageCollection(asset_mosaicos_col9)
                        .filterMetadata('biome', 'equals', 'PANTANAL')
                        .filterMetadata('year', 'equals', 1993)
 //                       .filter(ee.Filter.eq('satellite', asset1))
                        .filterBounds(geometry)
                        .mosaic()
Map.addLayer(mosaicoTotal, {bands: ['swir1_median', 'nir_median', 'red_median'],gain: [0.08, 0.06, 0.2],gamma: 0.85}, 'mosaico 1993', false) 

// Display the original 1993
Map.addLayer(col9_93,vis,'Original 93',false)  

// Create a mosaic for 1994
var mosaicoTotal = ee.ImageCollection(asset_mosaicos_col9)
                        .filterMetadata('biome', 'equals', 'PANTANAL')
                        .filterMetadata('year', 'equals', 1994)
 //                       .filter(ee.Filter.eq('satellite', asset1))
                        .filterBounds(geometry)
                        .mosaic()
Map.addLayer(mosaicoTotal, {bands: ['swir1_median', 'nir_median', 'red_median'],gain: [0.08, 0.06, 0.2],gamma: 0.85}, 'mosaico 1994', false) 

// Display the original 1994
Map.addLayer(col9_94,vis,'Original 94',false)  

// Create a mosaic for 2023
var mosaicoTotal = ee.ImageCollection(asset_mosaicos_col9)
                        .filterMetadata('biome', 'equals', 'PANTANAL')
                        .filterMetadata('year', 'equals', 2023)
 //                       .filter(ee.Filter.eq('satellite', asset1))
                        .filterBounds(geometry)
                        .mosaic()
Map.addLayer(mosaicoTotal, {bands: ['swir1_median', 'nir_median', 'red_median'],gain: [0.08, 0.06, 0.2],gamma: 0.85}, 'mosaico 2023', false) 

// Display the original 2023
Map.addLayer(col9_23,vis,'Original 23',false)  

// Display the alerts
Map.addLayer(ee.Image().paint(table, 0, 1).toByte(),{palette:'red'},'alertas',false)

// Define the band names for the collection
var bandNames =  [
                 // 'classification_1987','classification_1988',
                 // 'classification_1989','classification_1990','classification_1991','classification_1992',
                 // 'classification_1993','classification_1994',
                  'classification_1995','classification_1996',
                  'classification_1997','classification_1998','classification_1999','classification_2000',
                  'classification_2001','classification_2002','classification_2003','classification_2004',
                  'classification_2005','classification_2006','classification_2007','classification_2008',
                  'classification_2009','classification_2010','classification_2011','classification_2012',
                  'classification_2013','classification_2014','classification_2015','classification_2016',
                  'classification_2017','classification_2018','classification_2019','classification_2020',
                  'classification_2021','classification_2022','classification_2023'
                  ]
                  
// Select the bands from the original image
var colecao = col9.select(bandNames)

// Add the corrected bands to the collection
var exportacao = colecao.addBands([corrigido85,corrigido86,corrigido87,corrigido88,corrigido89,corrigido90,
                                   corrigido91,corrigido92,corrigido93,corrigido94])
print('final',exportacao)

// Display the collection
Map.addLayer(exportacao,{},'coleção',false)

// Update col9 with the corrected collection
var col9 = exportacao

// Create a mask for forest in 1985 and 2023
var mascara = col9.select('classification_1985').eq(3).selfMask()
                .and(col9.select('classification_2023').eq(3).selfMask()).selfMask()

// Remap the mask to 100 for forest
var floresta23 = mascara.remap([1],[100],0)

// Display the mask
Map.addLayer(mascara,{},'MASCARA',false)

// Select the 2023 classification band
var class_outTotal = col9.select('classification_2023')

// Define the list of years for processing
var anos = [
            1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,
            2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,
            2012, 2013,2014,2015,2016,2017,2018,2019,2020,2021,2022
            ];

// Loop through each year and correct the classification
for (var i_ano=0;i_ano<anos.length; i_ano++){
  var ano = anos[i_ano];

  // Correct the classification based on the forest mask
  var class_corr = col9.select('classification_'+ano).add(floresta23)
                         .remap([3,4,12,19,21,22,25,33,103,104,112,119,121,122,125,133],
                                [3,4,12,19,21,22,25,33, 3,   3,  12,  3,  3,  3,  3,  33]).rename('classification_'+ano)

  // Blend the original classification with the corrected classification
  var saida_ano =  col9.select('classification_'+ano).blend(class_corr.select('classification_'+ano))

  // Combine the corrected classifications for all years
  if (i_ano == 0){ var class_outTotal2 = saida_ano}  //.addBands(col9.select('classification_2022'))
  else {class_outTotal2 = class_outTotal2.addBands(saida_ano)}
}

// Print the corrected classification
print('teste',class_outTotal2)

// Add the corrected classifications to the original image
class_outTotal = class_outTotal.addBands(class_outTotal2)

// Select classification bands for years 2018 to 2023
var col9_18 = class_outTotal.select('classification_2018')
var col9_19 = class_outTotal.select('classification_2019')
var col9_20 = class_outTotal.select('classification_2020')
var col9_21 = class_outTotal.select('classification_2021')
var col9_22 = class_outTotal.select('classification_2022')
var col9_23 = class_outTotal.select('classification_2023')

// Create a mosaic for 2018
var mosaicoTotal = ee.ImageCollection(asset_mosaicos_col9)
                        .filterMetadata('biome', 'equals', 'PANTANAL')
                        .filterMetadata('year', 'equals', 2018)
 //                       .filter(ee.Filter.eq('satellite', asset1))
                        .filterBounds(geometry)
                        .mosaic()
Map.addLayer(mosaicoTotal, {bands: ['swir1_median', 'nir_median', 'red_median'],gain: [0.08, 0.06, 0.2],gamma: 0.85}, 'mosaico 2018', false) 

// Correct 2018: If 2018 is not forest and 2019 or 2020 are forest, then 2018 is forest
var corrigir18flo = col9_18.neq(3)
              .and(col9_19.eq(3).or(col9_20.eq(3))).remap([1],[3],0).selfMask()
// Correct 2018: If 2018 is not savanna and 2019 or 2020 are savanna, then 2018 is savanna
var corrigir18sav = col9_18.neq(4)
              .and(col9_19.eq(4).or(col9_20.eq(4))).remap([1],[4],0).selfMask()    
              
// Create a mask for 2018, correcting pasture to forest or savanna
var mask18 = corrigir18sav.blend(corrigir18flo.blend(col9_18.eq(3).remap([1],[3],0).selfMask())).mask(col9_18.eq(21)).selfMask()
// Blend the original 2018 with the corrected mask
var corrigido18 = col9_18.blend(mask18).rename('classification_2018')
// Display the original and corrected 2018
Map.addLayer(col9_18,vis,'Original 18')
Map.addLayer(corrigido18,vis,'corrigido 18')
col9_18 = corrigido18   

// Repeat the correction process for years 2019 to 2022
var corrigir19flo = col9_19.neq(3)
              .and(col9_20.eq(3).or(col9_21.eq(3))).remap([1],[3],0).selfMask()
var corrigir19sav = col9_19.neq(4)
              .and(col9_20.eq(4).or(col9_21.eq(4))).remap([1],[4],0).selfMask()   
              
var mask19 = corrigir19sav.blend(corrigir19flo.blend(col9_19.eq(3).remap([1],[3],0).selfMask())).mask(col9_19.eq(21)).selfMask()
var corrigido19 = col9_19.blend(mask19).rename('classification_2019')
// Display the original and corrected 2019
Map.addLayer(col9_19,vis,'Original 19')
Map.addLayer(corrigido19,vis,'corrigido 19')
col9_19 = corrigido19  

// Correct 2020: If 2020 is not forest and 2021 or 2022 are forest, then 2020 is forest
var corrigir20flo = col9_20.neq(3)
              .and(col9_21.eq(3).or(col9_22.eq(3))).remap([1],[3],0).selfMask()
// Correct 2020: If 2020 is not savanna and 2021 or 2022 are savanna, then 2020 is savanna
var corrigir20sav = col9_20.neq(4)
              .and(col9_21.eq(4).or(col9_22.eq(4))).remap([1],[4],0).selfMask()   
              
// Create a mask for 2020, correcting pasture to forest or savanna
var mask20 = corrigir20sav.blend(corrigir20flo.blend(col9_20.eq(3).remap([1],[3],0).selfMask())).mask(col9_20.eq(21)).selfMask()
// Blend the original 2020 with the corrected mask
var corrigido20 = col9_20.blend(mask20).rename('classification_2020')
// Display the original and corrected 2020
Map.addLayer(col9_20,vis,'Original 20')
Map.addLayer(corrigido20,vis,'corrigido 20')
col9_20 = corrigido20  

// Correct 2021: If 2021 is not forest and 2022 or 2023 are forest, then 2021 is forest
var corrigir21flo = col9_21.neq(3)
              .and(col9_22.eq(3).or(col9_23.eq(3))).remap([1],[3],0).selfMask()
// Correct 2021: If 2021 is not savanna and 2022 or 2023 are savanna, then 2021 is savanna
var corrigir21sav = col9_21.neq(4)
              .and(col9_22.eq(4).or(col9_23.eq(4))).remap([1],[4],0).selfMask()   
              
// Create a mask for 2021, correcting pasture to forest or savanna
var mask21 = corrigir21sav.blend(corrigir21flo.blend(col9_21.eq(3).remap([1],[3],0).selfMask())).mask(col9_21.eq(21)).selfMask()
// Blend the original 2021 with the corrected mask
var corrigido21 = col9_21.blend(mask21).rename('classification_2021')
// Display the original and corrected 2021
Map.addLayer(col9_21,vis,'Original 21')
Map.addLayer(corrigido21,vis,'corrigido 21')
col9_21 = corrigido21  

// Correct 2022: If 2022 is not forest and 2023 is forest, then 2022 is forest
var corrigir22flo = col9_22.neq(3)
              .and(col9_23.eq(3)).remap([1],[3],0).selfMask()
// Correct 2022: If 2022 is not savanna and 2023 is savanna, then 2022 is savanna
var corrigir22sav = col9_22.neq(4)
              .and(col9_23.eq(4)).remap([1],[4],0).selfMask()   
              
// Create a mask for 2022, correcting pasture to forest or savanna
var mask22 = corrigir22sav.blend(corrigir22flo.blend(col9_22.eq(3).remap([1],[3],0).selfMask())).mask(col9_22.eq(21)).selfMask()
// Blend the original 2022 with the corrected mask
var corrigido22 = col9_22.blend(mask22).rename('classification_2022')
// Display the original and corrected 2022
Map.addLayer(col9_22,vis,'Original 22')
Map.addLayer(corrigido22,vis,'corrigido 22')
col9_22 = corrigido22 

// If 2021 and 2022 are savanna, then 2023 is savanna
// If 2021 and 2022 are forest, then 2023 is forest

// Correct 2023: If 2023 is not forest and 2022 and 2021 are forest, then 2023 is forest
var corrigir23flo = col9_23.neq(3)
              .and(col9_22.eq(3).and(col9_21.eq(3))).remap([1],[3],0).selfMask()
// Correct 2023: If 2023 is not savanna and 2022 and 2021 are savanna, then 2023 is savanna
var corrigir23sav = col9_22.neq(4)
              .and(col9_22.eq(4).and(col9_21.eq(4))).selfMask()   
// Create a mask for 2023, correcting pasture to forest or savanna
var mask23 = corrigir23sav.blend(corrigir23flo.blend(col9_23.eq(3).remap([1],[3],0).selfMask())).selfMask()
// Blend the original 2023 with the corrected mask
var corrigido23 = col9_23.blend(mask23).rename('classification_2023')
// Display the original and corrected 2023
Map.addLayer(col9_23,vis,'Original 23')
Map.addLayer(corrigido23,vis,'corrigido 23')

// Define the band names for the collection
var bandNames =  ['classification_1985','classification_1986',
                  'classification_1987','classification_1988',
                  'classification_1989','classification_1990','classification_1991','classification_1992',
                  'classification_1993','classification_1994',
                  'classification_1995','classification_1996',
                  'classification_1997','classification_1998','classification_1999','classification_2000',
                  'classification_2001','classification_2002','classification_2003','classification_2004',
                  'classification_2005','classification_2006','classification_2007','classification_2008',
                  'classification_2009','classification_2010','classification_2011','classification_2012',
                  'classification_2013','classification_2014','classification_2015','classification_2016',
                  'classification_2017',
                  //'classification_2018','classification_2019','classification_2020',
                  //'classification_2021','classification_2022',
                  //'classification_2023'
                  ]
                  
// Select the bands from the original image
var colecao = class_outTotal.select(bandNames)

// Add the corrected bands to the collection
var final = colecao.addBands([corrigido23,corrigido22,corrigido21,corrigido20,corrigido19,corrigido18])

// Calculate the sum of water pixels for each year
var colModa = ee.ImageCollection([ 
  final.select('classification_1985').rename('class').eq(33),
  final.select('classification_1986').rename('class').eq(33),
  final.select('classification_1987').rename('class').eq(33),
  final.select('classification_1988').rename('class').eq(33),
  final.select('classification_1989').rename('class').eq(33),
  final.select('classification_1990').rename('class').eq(33),
  final.select('classification_1991').rename('class').eq(33),
  final.select('classification_1992').rename('class').eq(33),
  final.select('classification_1993').rename('class').eq(33),
  final.select('classification_1994').rename('class').eq(33),
  final.select('classification_1995').rename('class').eq(33),
  final.select('classification_1996').rename('class').eq(33),
  final.select('classification_1997').rename('class').eq(33),
  final.select('classification_1998').rename('class').eq(33),
  final.select('classification_1999').rename('class').eq(33),
  final.select('classification_2000').rename('class').eq(33),
  final.select('classification_2001').rename('class').eq(33),
  final.select('classification_2002').rename('class').eq(33),
  final.select('classification_2003').rename('class').eq(33),
  final.select('classification_2004').rename('class').eq(33),
  final.select('classification_2005').rename('class').eq(33),
  final.select('classification_2006').rename('class').eq(33),
  final.select('classification_2007').rename('class').eq(33),
  final.select('classification_2008').rename('class').eq(33),
  final.select('classification_2009').rename('class').eq(33),
  final.select('classification_2010').rename('class').eq(33),
  final.select('classification_2011').rename('class').eq(33),
  final.select('classification_2012').rename('class').eq(33),
  final.select('classification_2013').rename('class').eq(33),
  final.select('classification_2014').rename('class').eq(33),
  final.select('classification_2015').rename('class').eq(33),
  final.select('classification_2016').rename('class').eq(33),
  final.select('classification_2017').rename('class').eq(33),
  final.select('classification_2018').rename('class').eq(33),
  final.select('classification_2019').rename('class').eq(33),
  final.select('classification_2020').rename('class').eq(33),
  final.select('classification_2021').rename('class').eq(33),
  final.select('classification_2022').rename('class').eq(33),
  final.select('classification_2023').rename('class').eq(33),
  ]).sum()

// Display the water pixels
Map.addLayer(colModa,vis, 'agua col 9')


//Spatial filter

// Define the list of years for processing
var anos = [
            1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,
            2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,
            2012, 2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023
            ];

// Create a mask for water pixels
var maskAgua = colModa.gte(1).remap([1],[100]).toByte().selfMask()

// Display the water mask
Map.addLayer(maskAgua,{},'mscara agua')

//// Stabilize as pasture
// If pasture in 1985 and pasture in 2022 and the mode is pasture, then stabilize as pasture
for (var i_ano=0;i_ano<anos.length; i_ano++){
    var ano = anos[i_ano];
    
    // Correct the classification based on the water mask
    var class_corr_agu_ano = col9.select('classification_'+ano).add(maskAgua)
                         .remap([3,4,12,19,21,22,25,33,103,104,112,119,121,122,125,133],
                                [3,4,12,19,21,22,25,33, 12, 4, 12,  12, 21, 12, 12, 33])

    // Blend the original classification with the corrected classification
    var saida_ano = col9.select('classification_'+ano).blend(class_corr_agu_ano.rename('classification_'+ano))

    // Combine the corrected classifications for all years
    if (i_ano == 0){ var class_outTotal5 = saida_ano}  
    else {class_outTotal5 = class_outTotal5.addBands(saida_ano)}
}

// Create a copy of the classification image
var class4GAP = class8

// Define the list of years for processing
var anos = ['1985','1986','1987','1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998',
            '1999','2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012',
            '2013','2014','2015','2016','2017','2018','2019','2020','2021','2022','2023'];

// Loop through each year and apply the spatial filter
for (var i_ano=0;i_ano<anos.length; i_ano++){  
  var ano = anos[i_ano]; 

  // Calculate the mode of the classification for the current year
  var moda = class4GAP.select('classification_'+ano).focal_mode(2, 'square', 'pixels')

  // Calculate the connected pixel count for the current year
  var connected = class4GAP.select('classification_'+ano).connectedPixelCount(10,true).reproject('epsg:4326', null, 30)

  // Mask the mode image to remove pixels with a connected pixel count less than the minimum threshold
  moda = moda.mask(connected.lte(min_connect_pixel))

  // Blend the original classification with the filtered mode image
  var class_out = class4GAP.select('classification_'+ano).blend(moda)

  // Combine the filtered classifications for all years
  if (i_ano == 0){ var class_outTotal = class_out }  
  else {class_outTotal = class_outTotal.addBands(class_out); }

  // Display the original and filtered classifications
  Map.addLayer(class8.select('classification_'+ano), vis, 'original '+ano,false);
  Map.addLayer(class_outTotal.select('classification_'+ano), vis, 'class4 MODA '+ano,false);
}

// Print the final filtered classification
print(class_outTotal)

// Display the final filtered classification
Map.addLayer(class_outTotal, vis, 'class4 MODA');

// Temporal filter
var col9 = class_outTotal
print(col9)

// Load the palettes module and define visualization parameters
var palettes = require('users/mapbiomas/modules:Palettes.js');
var vis = {
    'min': 0,
    'max': 45,
    'palette': palettes.get('classification5')
};

// Define visualization parameters for the 2022 classification band
var vis2 = {
    'bands': 'classification_2022',
    'min': 0,
    'max': 45,
    'palette': palettes.get('classification5')
};

// Display the Collection 9 classification image
Map.addLayer(col9, vis2, 'class9', true);

// Select the 1985 classification band
var col9_85_corr = col9.select('classification_1985')

// Display the 1985 classification band
Map.addLayer(col9_85_corr, vis, 'col9_85_corr', true);

// Define the list of years for processing
var anos = [
   2022,2021,2020,2019,2018,2017,2016,2015,2014,2013,
   2012,2011,2010,2009,2008,2007,2006,2005,2004,2003,2002,2001,
   2000,1999,1998,1997,1996,1995,1994,
   1993,1992,1991,1990,1989,1988,1987,1986
            ];

// Define a function to apply a 3-year temporal filter
var window3years = function(imagem, classe){
   // Initialize the final classification image with the 2023 band
   var class_final = imagem.select('classification_2023')
   
   // Loop through each year
   for (var i_ano=0;i_ano<anos.length; i_ano++){
     var ano = anos[i_ano];
     // Select the classification band for the current year
     var class_ano = imagem.select('classification_'+ano)
     // Create a mask for pixels that meet the 3-year filter criteria
     var mask_3 = imagem.select('classification_'+ (ano + 1)).neq(classe)
                .and(imagem.select('classification_'+ (ano)).eq(classe))
                .and(imagem.select('classification_'+ (ano - 1)).neq(classe))
     // Remap the mask to ensure consistency with the desired class
     mask_3 = imagem.select('classification_'+ (ano - 1)).remap([3,4,12,21,19],[3,4,12,12,12]).updateMask(mask_3)
     // Blend the original classification with the masked image
     var class_corr = class_ano.blend(mask_3.rename('classification_'+ano))
     // Add the corrected classification to the final image
     class_final = class_final.addBands(class_corr)
   }
   // Add the 1985 classification band to the final image
   class_final = class_final.addBands(col9_85_corr)
   // Return the final classification image
   return class_final
}

// Apply the 3-year filter for classes 3, 4, and 12
var filtered = window3years(col9, 3)
filtered = window3years(filtered,  4)
filtered = window3years(filtered, 12)

// Apply the 3-year filter again for classes 3 and 4
filtered = window3years(filtered, 3)
filtered = window3years(filtered, 4)

// Print the filtered image
print('teste',filtered)

// Define the list of years for processing
var anos = [
   2021,2019,2017,2015,
   2013,2011,2009,2007,2005,2003,
   2001,1999,1997,1995,
   1993,1991,1989,1987
            ];

// Define a function to apply a 4-year temporal filter
var window4years = function(imagem, classe){
   // Initialize the final classification image with the 2023 and 2022 bands
   var class_final = imagem.select('classification_2023')
      class_final = class_final.addBands(imagem.select('classification_2022'))
   // Loop through each year
   for (var i_ano=0;i_ano<anos.length; i_ano++){
     var ano = anos[i_ano];
     // Select the classification band for the current year
     var class_ano = imagem.select('classification_'+ano)
     // Create a mask for pixels that meet the 4-year filter criteria
     var mask_3 = imagem.select('classification_'+ (ano + 1)).neq(classe)
                .and(imagem.select('classification_'+ (ano)).eq(classe))
                .and(imagem.select('classification_'+ (ano - 1)).eq(classe))
                .and(imagem.select('classification_'+ (ano - 2)).neq(classe))
     // Remap the mask to ensure consistency with the desired class
     mask_3 = imagem.select('classification_'+ (ano - 2)).remap([3,4,12,21,19],[3,4,12,12,12]).updateMask(mask_3)
     // Blend the original classification with the masked image
     var class_corr = class_ano.blend(mask_3.rename('classification_'+ano))
     // Add the corrected classification to the final image
     class_final = class_final.addBands(class_corr)
     // Blend the original classification with the masked image for the previous year
     var class_corr2 = imagem.select('classification_'+ (ano - 1)).blend(mask_3.rename('classification_'+ (ano - 1)))
     // Add the corrected classification for the previous year to the final image
     class_final = class_final.addBands(class_corr2)
   }
  // Add the 1986 classification band to the final image
   class_final = class_final.addBands(imagem.select('classification_1986'))
   // Add the 1985 classification band to the final image
   class_final = class_final.addBands(imagem.select('classification_1985'))
   // Return the final classification image
   return class_final
}

// Apply the 4-year filter for classes 3, 4, and 12
filtered = window4years(filtered, 3)
filtered = window4years(filtered, 4)
filtered = window4years(filtered, 12)

// Apply the 4-year filter again for classes 3 and 4
filtered = window4years(filtered, 3)
filtered = window4years(filtered, 4)

// Print the filtered image
print('pares',filtered)

// Define the list of years for processing
var anos = [
   2022,2020,2018,2016,2014,
   2012,2010,2008,2006,2004,2002,
   2000,1998,1996,
   1994,1992,1990,1988
            ];

// Define a function to apply a 4-year temporal filter (for even years)
var window4years2 = function(imagem, classe){
   // Initialize the final classification image with the 2023 band
   var class_final2 = imagem.select('classification_2023')
 //  class_final2 = class_final2.addBands(imagem.select('classification_2022'))
   
   // Loop through each year
   for (var i_ano=0;i_ano<anos.length; i_ano++){
     var ano = anos[i_ano];
     // Select the classification band for the current year
     var class_ano = imagem.select('classification_'+ano)
     // Create a mask for pixels that meet the 4-year filter criteria
     var mask_3 = imagem.select('classification_'+ (ano + 1)).neq(classe)
                .and(imagem.select('classification_'+ (ano)).eq(classe))
                .and(imagem.select('classification_'+ (ano - 1)).eq(classe))
                .and(imagem.select('classification_'+ (ano - 2)).neq(classe))
     // Remap the mask to ensure consistency with the desired class
     mask_3 = imagem.select('classification_'+ (ano - 2)).remap([3,4,12,21,19],[3,4,12,12,12]).updateMask(mask_3)
     // Blend the original classification with the masked image
     var class_corr = class_ano.blend(mask_3.rename('classification_'+ano))
     // Add the corrected classification to the final image
     class_final2 = class_final2.addBands(class_corr)
     // Blend the original classification with the masked image for the previous year
     var class_corr2 = imagem.select('classification_'+ (ano - 1)).blend(mask_3.rename('classification_'+ (ano - 1)))
     // Add the corrected classification for the previous year to the final image
     class_final2 = class_final2.addBands(class_corr2)
   }   
   // Add the 1986 and 1985 classification bands to the final image
   class_final2 = class_final2.addBands(imagem.select('classification_1986'))
   class_final2 = class_final2.addBands(imagem.select('classification_1985'))

   // Return the final classification image
   return class_final2
}

// Apply the 4-year filter (for even years) for classes 3, 4, and 12
filtered = window4years2(filtered, 3)
filtered = window4years2(filtered,  4)
filtered = window4years2(filtered, 12)

// Apply the 4-year filter (for even years) again for classes 3 and 4
filtered = window4years2(filtered, 3)
filtered = window4years2(filtered, 4)

// Display the original and filtered classifications
Map.addLayer(col9, vis2, 'class9', true);
Map.addLayer(filtered, vis2, 'class_final2', true);

// Define variables for exporting the image
var vesion_in = '04'
var version_out = 'p03c_v10';
var descricao = 'Filtros temporais de 3 e 4 anos'
var col = 9.0
var prefixo_in = 'PANT_col9_Anual_'
var prefixo_out = 'PANT_col9_Anual_'
var dirout = 'projects/mapbiomas-workspace/COLECAO9/classificacao-pantanal/';

// Set metadata for the classified image
filtered = filtered
.set('territory', 'PANTANAL')
.set('biome', 'PANTANAL')
.set('source', 'arcplan')
.set('version', version_out)
.set('year', version_out)
.set('collection_id', col)
.set('description', descricao)

// Print the final filtered classification
print('Final exportação:',filtered)

// Export the filtered classification to an asset
Export.image.toAsset({
    "image": filtered.toByte(),
    "description": prefixo_out+version_out,
    "assetId": dirout + prefixo_out+version_out,
    "scale": 30,
    "pyramidingPolicy": {
        '.default': 'mode'
    },
    "maxPixels": 1e13,
    "region": geometry
  });    


//
  
//Developed by ArcPlan Team
//Marcos Rosa, Eduardo Rosa, Mariana Dias
//Updated July 2024 - MD - mariana@arcplan.com.br