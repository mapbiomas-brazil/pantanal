/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-58.52936205752952, -16.48069309590335],
          [-58.57330737002952, -17.101247170160555],
          [-58.32062182315452, -17.478882098612424],
          [-57.96905932315452, -17.656938725904308],
          [-57.77130541690452, -17.897558502926692],
          [-57.67242846377952, -18.273525077010646],
          [-57.94708666690452, -19.23060191352147],
          [-58.24371752627952, -19.71741814896459],
          [-58.29864916690452, -20.274912605306977],
          [-57.99103197940452, -20.96383809400686],
          [-58.07892260440452, -21.578107423128746],
          [-58.10089526065452, -22.230467998199895],
          [-57.41974291690452, -22.26097380469566],
          [-57.32086596377952, -21.88427321684344],
          [-57.11212572940452, -21.49635339908078],
          [-56.98028979190452, -21.056141489602602],
          [-56.82648119815452, -20.45000902167834],
          [-56.38702807315452, -20.48088774020802],
          [-55.89264330752952, -20.50147010055191],
          [-55.65094408877952, -20.50147010055191],
          [-55.10162768252952, -19.44829624235093],
          [-54.68414721377952, -18.482045076276716],
          [-54.68414721377952, -17.792981029318906],
          [-54.80499682315452, -17.048736849002278],
          [-54.82696947940452, -16.522828344097242],
          [-55.06866869815452, -16.217140881812828],
          [-55.50812182315452, -15.847575770994556],
          [-56.00250658877952, -15.604348700492018],
          [-56.71661791690452, -15.93210807445483],
          [-57.29889330752952, -15.805296326997492],
          [-57.95807299502952, -15.535558114006925],
          [-58.973632404627836, -15.897400514355134],
          [-59.290155580858844, -16.315729569211467]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Define a variable to control whether to use eight-connected component analysis
var VeightConnected = true

// Define the year and biome for processing test
var ano = 1987
var bioma = "PANTANAL";

// Load the biomes image and mask it to the Pantanal biome
var biomes = ee.Image('projects/mapbiomas-workspace/AUXILIAR/biomas-raster-41')
var bioma250mil_PANT = biomes.mask(biomes.eq(3))

// Load the Collection 9 classification image
var image = ee.Image('projects/mapbiomas-workspace/COLECAO9/classificacao-pantanal/PANT_col9_Anual_p02b_v02')//.mask(bioma250mil_PANT)

////*************************************************************
// Do not Change from these lines
////*************************************************************

// Load the palettes module and define visualization parameters
var palettes = require('users/mapbiomas/modules:Palettes.js');
var vis = {
    'min': 0,
    'max': 45,
    'palette': palettes.get('classification5')
};

// Mask the image to remove pixels with value 0
image = image.mask(image.neq(0))

// Print the image
// print(image)

// Define the list of years for processing
var years = [
    1985, 1986, 1987, 1988,
    1989, 1990, 1991, 1992,
    1993, 1994, 1995, 1996,
    1997, 1998, 1999, 2000,
    2001, 2002, 2003, 2004,
    2005, 2006, 2007, 2008,
    2009, 2010, 2011, 2012,
    2013, 2014, 2015, 2016,
    2017, 2018, 2019, 2020,2021,2022,2023];

/**
 * User defined functions
 */

// Define a function to apply gap filling
var applyGapFill = function (image) {

    // Apply gap filling from t0 to tn
    var imageFilledt0tn = bandNames.slice(1)
        .iterate(
            function (bandName, previousImage) {

                // Select the current band
                var currentImage = image.select(ee.String(bandName));

                // Cast the previous image to an Image
                previousImage = ee.Image(previousImage);

                // Unmask the current image using the previous image
                currentImage = currentImage.unmask(
                    previousImage.select([0]));

                // Add the current image to the previous image
                return currentImage.addBands(previousImage);

            }, ee.Image(imageAllBands.select([bandNames.get(0)]))
        );

    // Cast the image to an Image
    imageFilledt0tn = ee.Image(imageFilledt0tn);

    // Apply gap filling from tn to t0
    var bandNamesReversed = bandNames.reverse();

    var imageFilledtnt0 = bandNamesReversed.slice(1)
        .iterate(
            function (bandName, previousImage) {

                // Select the current band
                var currentImage = imageFilledt0tn.select(ee.String(bandName));

                // Cast the previous image to an Image
                previousImage = ee.Image(previousImage);

                // Unmask the current image using the last band of the previous image
                currentImage = currentImage.unmask(
                    previousImage.select(previousImage.bandNames().length().subtract(1)));

                // Add the current image to the previous image
                return previousImage.addBands(currentImage);

            }, ee.Image(imageFilledt0tn.select([bandNamesReversed.get(0)]))
        );

    // Cast the image to an Image and select the desired bands
    imageFilledtnt0 = ee.Image(imageFilledtnt0).select(bandNames);

    // Return the gap-filled image
    return imageFilledtnt0;
};

// Get the band names list
var bandNames = ee.List(
    years.map(
        function (year) {
            return 'classification_' + String(year);
        }
    )
);

// Generate a histogram dictionary of [bandNames, image.bandNames()]
var bandsOccurrence = ee.Dictionary(
    bandNames.cat(image.bandNames()).reduce(ee.Reducer.frequencyHistogram())
);

// Print the histogram dictionary
print(bandsOccurrence);

// Create a dictionary of images, masking bands with occurrence 2
var bandsDictionary = bandsOccurrence.map(
    function (key, value) {
        return ee.Image(
            ee.Algorithms.If(
                ee.Number(value).eq(2),
                image.select([key]).byte(),
                ee.Image().rename([key]).byte().updateMask(image.select(0))
            )
        );
    }
);

// Convert the dictionary to an image
var imageAllBands = ee.Image(
    bandNames.iterate(
        function (band, image) {
            return ee.Image(image).addBands(bandsDictionary.get(ee.String(band)));
        },
        ee.Image().select()
    )
);

// Generate an image of pixel years
var imagePixelYear = ee.Image.constant(years)
    .updateMask(imageAllBands)
    .rename(bandNames);

// Apply gap filling
var imageFilledtnt0 = applyGapFill(imageAllBands);

// Mask the gap-filled image to the Pantanal biome
//imageFilledtnt0 = imageFilledtnt0.mask(bioma250mil_PANT)

// Display the original image
Map.addLayer(image.select('classification_'+ano), vis, 'image',false);

// Display the gap-filled image
Map.addLayer(imageFilledtnt0.select('classification_'+ano), vis, 'filtered');


// Print the gap-filled image
print(imageFilledtnt0);

// Define variables for exporting the image
var vesion_in = '1'
var version_out = 'p02c_v02';
var descricao = 'GAP fill'
var col = 9.0
var prefixo_in = 'PANT_col9_Anual_'
var prefixo_out = 'PANT_col9_Anual_'
var dirout = 'projects/mapbiomas-workspace/COLECAO9/classificacao-pantanal/';

// Set metadata for the classified image
imageFilledtnt0 = imageFilledtnt0.toInt8()
.set('territory', 'PANTANAL')
.set('biome', 'PANTANAL')
.set('source', 'arcplan')
.set('version', version_out)
.set('year', version_out)
.set('collection_id', col)
.set('description', descricao)

// Print the gap-filled image
print(imageFilledtnt0)

// Export the gap-filled image to an asset
Export.image.toAsset({
    "image": imageFilledtnt0,
    "description": prefixo_out+version_out,
    "assetId": dirout + prefixo_out+version_out,
    "scale": 30,
    "pyramidingPolicy": {
        '.default': 'mode'
    },
    "maxPixels": 1e13,
    "region": geometry
  });    

//Developed by ArcPlan Team
//Marcos Rosa, Eduardo Rosa, Mariana Dias
//Updated July 2024 - MD - mariana@arcplan.com.br