/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var correcao_col6 = 
    /* color: #1503d6 */
    /* shown: false */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-57.170305502804865, -19.679427557385946],
                  [-57.16172243395721, -19.72015437029101],
                  [-57.099924338254084, -19.74245275383519],
                  [-56.99486757555877, -19.766363501510728],
                  [-56.94302583971893, -19.780255937872813],
                  [-56.92448641100799, -19.807714166164107],
                  [-56.88500429430877, -19.826770621142522],
                  [-56.8757345799533, -19.844855990242646],
                  [-56.84929872790252, -19.847762375316044],
                  [-56.848955405148615, -19.838720113692567],
                  [-56.85067201891815, -19.824186828909433],
                  [-56.85204530993377, -19.813528241989484],
                  [-56.85067201891815, -19.80642212045361],
                  [-56.84689546862518, -19.799315681490675],
                  [-56.84311891833221, -19.792531966455762],
                  [-56.8317892674533, -19.790593709064456],
                  [-57.16343904772674, -19.67554827289494]]]),
            {
              "reference": 1,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-56.36182411684741, -17.26532030438435],
                  [-56.37075127230559, -17.24835394176182],
                  [-56.38791739687316, -17.254337833745396],
                  [-56.40302284731616, -17.25187784787182],
                  [-56.41418469042379, -17.214829727260756],
                  [-56.44525495427281, -17.215489475119984],
                  [-56.469629098488134, -17.221395824816113],
                  [-56.48267372622241, -17.23320470536443],
                  [-56.50833740560515, -17.24189421446286],
                  [-56.53880890986677, -17.242054071947276],
                  [-56.56610115542163, -17.217447580036275],
                  [-56.59261560799942, -17.218113882354928],
                  [-56.597976894835575, -17.226316445891754],
                  [-56.60677188678614, -17.230583675572348],
                  [-56.6170244998582, -17.23042272682958],
                  [-56.62077764429446, -17.237228089856522],
                  [-56.63139762030074, -17.240098343669253],
                  [-56.64027798305825, -17.2487892407934],
                  [-56.65190516477798, -17.244364096281227],
                  [-56.665248610242834, -17.247233499886555],
                  [-56.66299422561809, -17.251618984234167],
                  [-56.668979708935794, -17.259283208814036],
                  [-56.67575616046223, -17.268955763607284],
                  [-56.6883705286655, -17.270103217422612],
                  [-56.69330457628494, -17.274282725930824],
                  [-56.701264908403566, -17.272438296149947],
                  [-56.703075372539956, -17.276346505423394],
                  [-56.70007929296942, -17.280254712957518],
                  [-56.69673985714613, -17.284490743724433],
                  [-56.698206896802105, -17.288726770151502],
                  [-56.70139075952189, -17.288537173618742],
                  [-56.702514627591945, -17.283758164145127],
                  [-56.710941933125895, -17.280100635186674],
                  [-56.77655800356616, -17.361028436976238],
                  [-56.96057899965991, -17.61905929934305],
                  [-56.911134192007275, -17.628233798067257],
                  [-56.81501015200366, -17.587643686488995],
                  [-56.65168553893103, -17.502086389581358],
                  [-56.546390551000876, -17.44910536366099],
                  [-56.49513221503159, -17.45273340573415],
                  [-56.49370927533789, -17.44054369080805],
                  [-56.476960357009155, -17.450516816855206],
                  [-56.45300082383257, -17.448041835266455],
                  [-56.44140294225735, -17.45572159240538],
                  [-56.43225688219675, -17.458004085702466],
                  [-56.427684594473945, -17.44800995563259],
                  [-56.46739586367358, -17.405260187576427],
                  [-56.35907753481616, -17.34660985429908],
                  [-56.37281044497241, -17.291546665170138]]]),
            {
              "reference": 1,
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-59.20729259464404, -15.649771326304686],
                  [-59.08918956730029, -15.342750143950196],
                  [-59.57258800480029, -15.342750143950196],
                  [-59.57258800480029, -15.808395322624333]]]),
            {
              "reference": 1,
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-55.062743380281745, -22.37575997973827],
                  [-54.31561854144531, -22.335114597107538],
                  [-54.46943863448534, -21.92801172460454],
                  [-54.807292483769686, -22.16987103347409]]]),
            {
              "reference": 1,
              "system:index": "3"
            })]),
    agua_para_savana = 
    /* color: #d63000 */
    /* shown: false */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-57.51945982267512, -19.163531416048965],
                  [-57.520489790936836, -19.20925104588084],
                  [-57.55141797612088, -19.244515527205973],
                  [-57.625154204016326, -19.247907093912765],
                  [-57.68528814391753, -19.206405692071332],
                  [-57.70146877980281, -19.215956608531116],
                  [-57.61573787700465, -19.276882778249487],
                  [-57.56278557643299, -19.262119418343477],
                  [-57.483890082055545, -19.194397405501498],
                  [-57.484405066186405, -19.154349275588487],
                  [-57.49333242093089, -19.080877718280203],
                  [-57.543799902612186, -19.1436465086073],
                  [-57.57298233669422, -19.13051034602618],
                  [-57.55444290798328, -19.158889633635447]]]),
            {
              "reference": 1,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-57.53978693311054, -18.27862802760933],
                  [-57.53274881665546, -18.275694006776877],
                  [-57.500476477788276, -18.28009501941617],
                  [-57.47970545117695, -18.290200625784145],
                  [-57.45841944043476, -18.319699105394637],
                  [-57.4469181281789, -18.317254670978837],
                  [-57.463569281743354, -18.273248951512524],
                  [-57.47335398022968, -18.26330537186076],
                  [-57.505454657719916, -18.24439469851246],
                  [-57.54922830884296, -18.25401331548367],
                  [-57.564162848637885, -18.30275031676587]]]),
            {
              "reference": 1,
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-57.45740169191658, -18.13494988668322],
                  [-57.475981850606665, -18.095319938261643],
                  [-57.4916030359094, -18.077043812344524],
                  [-57.50155939577268, -18.07067935741778],
                  [-57.518897194844946, -18.06627306117791],
                  [-57.533166800955534, -18.038712552372242],
                  [-57.513168060754914, -18.039773042640366],
                  [-57.52801695964694, -18.012758055972636],
                  [-57.53005002122857, -17.98394425122915],
                  [-57.524764517430114, -17.975556995536845],
                  [-57.52806216586823, -17.96912911678482],
                  [-57.5336271193718, -17.955130406156304],
                  [-57.519284227123634, -17.969592599864512],
                  [-57.50287932210108, -17.97899162505615],
                  [-57.503887185916625, -17.975256464076335],
                  [-57.50796374351731, -17.96615289098615],
                  [-57.506589613848035, -17.93528584003119],
                  [-57.503027865447706, -17.92152623475142],
                  [-57.49970220786632, -17.91227802618283],
                  [-57.50186976463547, -17.906133275533836],
                  [-57.50294314292333, -17.900783310485963],
                  [-57.50950939508025, -17.892656288255363],
                  [-57.519035902330785, -17.87721861445319],
                  [-57.52418574363938, -17.875013065650602],
                  [-57.5540992514358, -17.847074022094173],
                  [-57.557209847639555, -17.84343820115084],
                  [-57.55980547935715, -17.848299245938644],
                  [-57.61900707703869, -17.82638590173986],
                  [-57.656257595837516, -17.804976640755964],
                  [-57.661064114392204, -17.77784365752805],
                  [-57.66209408265392, -17.747600237157897],
                  [-57.673916882424955, -17.744065556428023],
                  [-57.69329259407259, -17.745434459005416],
                  [-57.6935931439625, -17.759943397129344],
                  [-57.69046084932874, -17.766441591397285],
                  [-57.68664165955822, -17.7720405869482],
                  [-57.68192148603358, -17.794964294153342],
                  [-57.67857357484142, -17.817561021652566],
                  [-57.664090574778946, -17.86522463836687],
                  [-57.60640487306816, -17.940873497895627],
                  [-57.581498771354326, -18.016518156630802],
                  [-57.56523380982926, -18.046071183484464],
                  [-57.55832122329006, -18.06495283357927],
                  [-57.55269931319484, -18.071725479378543],
                  [-57.54960940840969, -18.07352059471441],
                  [-57.53347323897609, -18.076458016582684],
                  [-57.52506183150539, -18.078253083527798],
                  [-57.51390384200344, -18.075805260415038],
                  [-57.514933810265156, -18.097834439172523],
                  [-57.52111361983547, -18.105666369242595],
                  [-57.50875400069484, -18.123286931949043],
                  [-57.49381946089992, -18.127039230186757],
                  [-57.49107287886867, -18.11170324312166],
                  [-57.473735079796406, -18.099139785152108],
                  [-57.46781296450913, -18.11243722892536],
                  [-57.46596751632318, -18.115985907448124],
                  [-57.464980349571796, -18.11839250902632],
                  [-57.47030185225734, -18.123450077023296],
                  [-57.465237841637226, -18.13291223113969],
                  [-57.46347834091907, -18.134788280727605],
                  [-57.46189047504476, -18.13633804106493],
                  [-57.460002169640156, -18.136174924266193]]]),
            {
              "reference": 1,
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-59.224595696347684, -15.352210001550098],
                  [-59.598130852597684, -15.415766097991677],
                  [-59.598130852597684, -15.775548107603486],
                  [-59.19419111550628, -15.638028710840976]]]),
            {
              "reference": 1,
              "system:index": "3"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-54.961900383847684, -22.374661769872986],
                  [-54.302720696347684, -22.293364331181163],
                  [-54.456529290097684, -21.98807859183464],
                  [-54.76379891746897, -22.17647825857753]]]),
            {
              "reference": 1,
              "system:index": "4"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-57.51002578699486, -17.986817721361643],
                  [-57.52779273950951, -17.993266842427936],
                  [-57.52650527918236, -18.011959797622158],
                  [-57.52427368128197, -18.018489620412154],
                  [-57.51268653833763, -18.03530279977244],
                  [-57.50127105677025, -18.04158692534339],
                  [-57.49354629480736, -18.043382348562137],
                  [-57.491658019660875, -18.036445384752703],
                  [-57.49182968103783, -18.030569154395533],
                  [-57.49680786096947, -18.026243470579313],
                  [-57.495863723396226, -18.020856621400895],
                  [-57.491143035530015, -18.01155167566248],
                  [-57.488911437629625, -18.00110343171853],
                  [-57.48951225244896, -17.994491332456573],
                  [-57.500927734016344, -17.98853206768425]]]),
            {
              "reference": 1,
              "system:index": "5"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-57.44587209075163, -18.147237511363763],
                  [-57.44956281035612, -18.148053123535952],
                  [-57.449219487602214, -18.15131553416724],
                  [-57.446215413505534, -18.15800328556513],
                  [-57.443211339408855, -18.16012373865383],
                  [-57.441923879081706, -18.16518009983021],
                  [-57.44115140288542, -18.168279087542942],
                  [-57.4390056356735, -18.168279087542942],
                  [-57.434714101249675, -18.16093929068022],
                  [-57.44200970977018, -18.1485424890126]]]),
            {
              "reference": 1,
              "system:index": "6"
            })]),
    agua_para_nao_veg = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[-57.65739064446336, -19.190042615518298],
           [-57.577911426934065, -19.320985584485058],
           [-57.513362837325566, -19.263138919811873],
           [-57.5428032859809, -19.233406617806292],
           [-57.53551106682664, -19.21257613578636],
           [-57.54847337563596, -19.194258236866933],
           [-57.57688145867235, -19.182746929829445],
           [-57.6204925224999, -19.013233841178444],
           [-57.654815723809065, -19.10587942827558],
           [-57.87119520583794, -19.129637812035146],
           [-57.9139675609774, -19.21974359049349],
           [-57.87526301452423, -19.20091815130389],
           [-57.83657478476924, -19.15030910643756],
           [-57.644686440096486, -19.167667778373307]]],
         [[[-59.092759758847684, -15.344264126641791],
           [-59.664048821347684, -15.415766097991677],
           [-59.290513665097684, -15.870678410123851]]],
         [[[-54.830064446347684, -22.354341854073343],
           [-54.302720696347684, -22.293364331181163],
           [-54.434556633847684, -21.96770272515269],
           [-54.802326860083824, -22.186576037807704]]]]),
    correcao_col5 = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[-57.0999460458554, -20.788365194466266],
           [-57.098744416216725, -20.774442406005846],
           [-57.11157610414397, -20.77388065272781],
           [-57.11110403535735, -20.7912539119038]]],
         [[[-54.81581524248179, -22.367517096413895],
           [-54.33241680498179, -22.35227665560602],
           [-54.44777325029429, -21.980914239953417]]],
         [[[-59.07714113983725, -15.354018329761228],
           [-59.58251223358725, -15.364612267182856],
           [-59.53856692108725, -15.787924866521584]]],
         [[[-55.830546625915815, -19.337404796513454],
           [-55.83696246987944, -19.299133225393852],
           [-55.83372236138945, -19.337809738752988]]]]),
    geometry = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-58.52936205752952, -16.48069309590335],
          [-58.57330737002952, -17.101247170160555],
          [-58.32062182315452, -17.478882098612424],
          [-57.96905932315452, -17.656938725904308],
          [-57.77130541690452, -17.897558502926692],
          [-57.67242846377952, -18.273525077010646],
          [-57.94708666690452, -19.23060191352147],
          [-58.24371752627952, -19.71741814896459],
          [-58.29864916690452, -20.274912605306977],
          [-57.99103197940452, -20.96383809400686],
          [-58.07892260440452, -21.578107423128746],
          [-58.10089526065452, -22.230467998199895],
          [-57.41974291690452, -22.26097380469566],
          [-57.32086596377952, -21.88427321684344],
          [-57.11212572940452, -21.49635339908078],
          [-56.98028979190452, -21.056141489602602],
          [-56.82648119815452, -20.45000902167834],
          [-56.38702807315452, -20.48088774020802],
          [-55.89264330752952, -20.50147010055191],
          [-55.65094408877952, -20.50147010055191],
          [-55.10162768252952, -19.44829624235093],
          [-54.68414721377952, -18.482045076276716],
          [-54.68414721377952, -17.792981029318906],
          [-54.80499682315452, -17.048736849002278],
          [-54.82696947940452, -16.522828344097242],
          [-55.06866869815452, -16.217140881812828],
          [-55.50812182315452, -15.847575770994556],
          [-56.00250658877952, -15.604348700492018],
          [-56.71661791690452, -15.93210807445483],
          [-57.29889330752952, -15.805296326997492],
          [-57.95807299502952, -15.535558114006925],
          [-58.973632404627836, -15.897400514355134],
          [-59.290155580858844, -16.315729569211467]]]),
    agro_nVegetada = 
    /* color: #d63000 */
    /* shown: false */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-57.420505191956295, -19.517239134633165],
                  [-57.42265095916821, -19.518614410831216],
                  [-57.42254367080761, -19.51974698244321],
                  [-57.419990207825435, -19.521648066949734],
                  [-57.41896023956372, -19.52023236784739],
                  [-57.41990437713696, -19.51687508897504]]]),
            {
              "reference": 1,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-57.45143597211606, -19.60997713907913],
                  [-57.454547334573334, -19.608501575556154],
                  [-57.46038382138974, -19.61090693927704],
                  [-57.46019070234067, -19.61345375576581],
                  [-57.45637123670346, -19.61501012376138],
                  [-57.45308821286923, -19.61246333192459]]]),
            {
              "reference": 1,
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-59.576490670497634, -15.332059994982654],
                  [-59.570997506435134, -15.792443605976352],
                  [-59.137037545497634, -15.374436975886063]]]),
            {
              "reference": 1,
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-54.45128741251373, -22.025837955118416],
                  [-54.68200030313873, -22.331041855030062],
                  [-54.28649249063873, -22.331041855030062]]]),
            {
              "reference": 1,
              "system:index": "3"
            })]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Load the biomes image and mask the Pantanal biome
var biomes = ee.Image('projects/mapbiomas-workspace/AUXILIAR/biomas-raster-41');
var bioma250mil = biomes.mask(biomes.eq(3));
// Add the Pantanal biome layer to the map
Map.addLayer(bioma250mil)

// Load the collection 9 image and convert to byte
var col8 = ee.Image('projects/mapbiomas-workspace/COLECAO9/classificacao-pantanal/PANT_col9_Anual_p03k_v02').toByte()

//se presença de água ou campo alagado gte 1 então floresta é savana


// Define the list of years
var anos = [
            1985,1986, 1987,1988,1989,
            1990,1991,1992,1993,1994,
            1995,1996,1997,1998,1999,
            2000,2001,2002,
            2003,2004,2005,2006,2007,
            2008,2009,2010,2011,
            2012, 2013,2014,2015,
            2016,2017,
            2018,2019,2020,2021,2022,2023
            ];

// Create an image collection with the frequency of flooded areas and water
var colModa = ee.ImageCollection([ 
  col8.select('classification_1985').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_1986').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_1987').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_1988').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_1989').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_1990').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_1991').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_1992').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_1993').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_1994').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_1995').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_1996').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_1997').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_1998').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_1999').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_2000').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_2001').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_2002').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_2003').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_2004').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_2005').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_2006').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_2007').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_2008').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_2009').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_2010').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_2011').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_2012').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_2013').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_2014').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_2015').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_2016').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_2017').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_2018').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_2019').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_2020').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_2021').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_2022').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_2023').eq(11).rename('reclass').toByte().selfMask(),
  col8.select('classification_1985').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_1986').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_1987').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_1988').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_1989').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_1990').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_1991').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_1992').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_1993').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_1994').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_1995').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_1996').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_1997').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_1998').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_1999').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_2000').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_2001').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_2002').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_2003').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_2004').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_2005').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_2006').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_2007').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_2008').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_2009').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_2010').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_2011').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_2012').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_2013').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_2014').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_2015').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_2016').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_2017').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_2018').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_2019').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_2020').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_2021').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_2022').eq(33).rename('reclass').toByte().selfMask(),
col8.select('classification_2023').eq(33).rename('reclass').toByte().selfMask(),
  ]).sum()

// Create a mask for areas with flooded areas or water for at least one year
var maskSav1 = colModa.gte(1).remap([1],[100]).toByte().selfMask()
//Map.addLayer(maskPresenceFlo,imageVisParam3,'maskPresenceFlo')
//Map.addLayer(maskPresenceSav,imageVisParam2,'maskPresenceSav')
//Map.addLayer(maskSav1,imageVisParam3,'maskSav1')

// Loop through the years
for (var i_ano=0;i_ano<anos.length; i_ano++){
    // Get the current year
    var ano = anos[i_ano];
    
    
    // Apply the mask to the classification for the current year
    var class_corr_agr_ano = col8.select('classification_'+ano).add(maskSav1)
                         .remap([3,4,11,12,19,21,22,25,33,103,104,111,112,119,121,122,125,133],
                                [3,4,11,12,19,21,22,25,33, 4, 4,   11,12, 19, 21, 22, 25, 33])


    // Blend the masked classification with the original classification for the current year
    var saida_ano = col8.select('classification_'+ano).blend(class_corr_agr_ano.rename('classification_'+ano))

    // If it's the first year, initialize the output image
    if (i_ano == 0){ var class_outTotal0 = saida_ano}  
    // Otherwise, add the corrected classification to the output image
    else {class_outTotal0 = class_outTotal0.addBands(saida_ano)}
}
// Import the palettes module
var palettes = require('users/mapbiomas/modules:Palettes.js');
// Define the visualization parameters for the classification
var vis = {
    'min': 0,
    'max': 45,
    'palette': palettes.get('classification5')
};
// Define the visualization parameters for the classification
var vis2 = {
    'bands': 'classification_1985',
    'min': 0,
    'max': 45,
    'palette': palettes.get('classification5')
}



//var anos = [2018,2020,2021];


// Assign the output image to the variable 'col8'
col8 = class_outTotal0

// Loop through the years
for (var i_ano=0;i_ano<anos.length; i_ano++){
  // Get the current year
  var ano = anos[i_ano];


    // Select the classification for the current year
    var col8_ano = col8.select('classification_'+ano)
    // Remap water to savanna
    var col8_ano_sav = col8.select('classification_'+ano).remap([33],[4]).rename('classification_'+ano).clip(agua_para_savana)
    // Remap flooded areas to camp
    var col8_ano_camp = col8.select('classification_'+ano).remap([11],[12]).rename('classification_'+ano).clip(agua_para_savana)
    // Remap flooded areas to camp
    var col8_ano_camp1 = col8.select('classification_'+ano).remap([11],[12]).rename('classification_'+ano).clip(agua_para_nao_veg)
    // Remap water to non-vegetated
    var col8_ano_out = col8.select('classification_'+ano).remap([33],[25]).rename('classification_'+ano).clip(agua_para_nao_veg)
    // Remap agriculture to non-vegetated
    var col8_ano_out2 = col8.select('classification_'+ano).remap([19],[25]).rename('classification_'+ano).clip(agro_nVegetada)
    // Blend the remapped classifications with the original classification
    var col8_corr = col8_ano.blend(col8_ano_sav).blend(col8_ano_out).blend(col8_ano_camp).blend(col8_ano_camp1).blend(col8_ano_out2)

    // If it's the first year, initialize the output image
    if (i_ano == 0){ var class_final = col8_corr}  
    // Otherwise, add the corrected classification to the output image
    else {class_final = class_final.addBands(col8_corr)}

}

//// remap 15 e 41



// Loop through the years
for (var i_ano=0;i_ano<anos.length; i_ano++){
  // Get the current year
  var ano = anos[i_ano];

  // Define the asset path for the mosaics
  var asset_mosaicos_col8 = 'projects/nexgenmap/MapBiomas2/LANDSAT/BRAZIL/mosaics-2';
  // Load the mosaic for the current year
  var mosaicoTotal = ee.ImageCollection(asset_mosaicos_col8)
                        .filterMetadata('biome', 'equals', 'PANTANAL')
                        .filterMetadata('year', 'equals', ano)
 //                       .filter(ee.Filter.eq('satellite', asset1))
                        //.filterBounds(geometry)
                        .mosaic()
  // Create a mask for areas with slope greater than 1000
  var slope = mosaicoTotal.clip(geometry).select('slope').gt(1000).selfMask().remap([1],[100])
  // var col8_anoTeste = class_final.select('classification_'+ano).remap([21],[12]).rename('classification_'+ano).mask(slope)
 
  // Apply the slope mask to the classification for the current year
  var class_corr_agr_ano = class_final.select('classification_'+ano).add(slope)
                         .remap([3, 4, 11, 12, 15, 21,25, 33, 19,41, 103, 104, 111, 112, 121, 125,119, 133],
                                [3, 4, 11, 12, 15, 21,25, 33, 19,41,   3,  4,   12,  12,  12,  25,  19, 12])



  // Blend the masked classification with the original classification for the current year
  var saida_ano = class_final.select('classification_'+ano).blend(class_corr_agr_ano.rename('classification_'+ano))






  // Select the classification for the current year
  var col8_ano = saida_ano.select('classification_'+ano)
  // Remap agriculture to non-vegetated
  var col8_ano_agro = saida_ano.select('classification_'+ano).remap([19],[41]).rename('classification_'+ano).clip(geometry)
  // Remap pasture to non-vegetated
  var col8_ano_past = saida_ano.select('classification_'+ano).remap([21],[15]).rename('classification_'+ano).clip(geometry)
  // Blend the remapped classifications with the original classification
  var col8_corr2 = saida_ano.blend(col8_ano_agro).blend(col8_ano_past)
  // Assign the blended classification to the variable 'teste2'
  var teste2 = saida_ano//.blend(col8_ano_agro).blend(col8_ano_past)

  // Add the mosaic to the map
  Map.addLayer(mosaicoTotal, {bands: ['swir1_median_wet', 'nir_median_wet', 'red_median_wet'],gain: [0.08, 0.06, 0.2],gamma: 0.85}, 'mosaico '+ano,false) 



                      
  //  Map.addLayer(col7_v78.select('classification_'+ano), vis, 'col7_v79 '+ano, false);
  // Add the classification for the current year to the map
  Map.addLayer(col8_ano.select('classification_'+ano), vis, 'col8_ano '+ano, false);
  // Add the corrected classification for the current year to the map
  Map.addLayer(col8_corr2.select('classification_'+ano), vis, 'col8_corr '+ano, false);
  // Add the slope mask to the map
  Map.addLayer(mosaicoTotal.clip(geometry).select('slope').gt(1000).selfMask(), {bands: ['slope']}, 'mosaico slope +1000 '+ano, false) 
  // Add the blended classification to the map
  Map.addLayer(teste2.select('classification_'+ano), vis, 'teste2 '+ano, false);
  // If it's the first year, initialize the output image
  if (i_ano == 0){ var class_final2 = col8_corr2}  
  // Otherwise, add the corrected classification to the output image
  else {class_final2 = class_final2.addBands(col8_corr2)}

}

// Set the flag for connected pixel count
var VeightConnected = true

// Define the minimum number of connected pixels
var min_connect_pixel = 6
// Load the collection 9 image
var class9 = class_final2


// Add the collection 9 image to the map
Map.addLayer(class9, vis2, 'class9', true);


// Assign the collection 9 image to the variable 'class4GAP'
var class4GAP = class8
// Define the list of years
var anos = ['1985','1986','1987','1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998',
            '1999','2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012',
            '2013','2014','2015','2016','2017','2018','2019','2020','2021','2022','2023'];
//var anos = ['1985']
// Loop through the years
for (var i_ano=0;i_ano<anos.length; i_ano++){  
  // Get the current year
  var ano = anos[i_ano]; 
  
  // Apply the focal mode filter
  var moda = class4GAP.select('classification_'+ano).focal_mode(2, 'square', 'pixels')
  // Calculate the connected pixel count
  var connected = class4GAP.select('classification_'+ano).connectedPixelCount(10,true).reproject('epsg:4326', null, 30)
  // Mask the focal mode image based on the connected pixel count
  moda = moda.mask(connected.lte(min_connect_pixel))
  // Blend the masked focal mode image with the original classification
  var class_out = class4GAP.select('classification_'+ano).blend(moda)
  
  // If it's the first year, initialize the output image
  if (i_ano == 0){ var class_outTotal = class_out }  
  // Otherwise, add the corrected classification to the output image
  else {class_outTotal = class_outTotal.addBands(class_out); }
  // Add the original and corrected classification to the map
  Map.addLayer(class8.select('classification_'+ano), vis, 'original '+ano,false);
  Map.addLayer(class_outTotal.select('classification_'+ano), vis, 'class4 MODA '+ano,false);
}
// Print the output image
print(class_outTotal)
// Add the output image to the map
Map.addLayer(class_outTotal, vis, 'class4 MODA');
//// Map.addLayer(class_out2, vis, 'class_out2');

var vesion_in = '00'
var version_out = 'p03o_v01';
var descricao = 'Filtro Espacial Final p/ integração'
var col = 9.0
var prefixo_in = 'PANT_col9_Anual_'
var prefixo_out = 'PANT_col9_Anual_'
var dirout = 'projects/mapbiomas-workspace/COLECAO9/classificacao-pantanal/';


// Set the metadata for the output image
class_outTotal = class_outTotal
.set('territory', 'PANTANAL')
.set('biome', 'PANTANAL')
.set('source', 'arcplan')
.set('version', version_out)
.set('year', version_out)
.set('collection_id', col)
.set('description', descricao)


  print('Final exportação:',class_outTotal)
  // Export the image to an asset
  Export.image.toAsset({
    "image": class_outTotal.toByte(),
    "description": prefixo_out+version_out,
    "assetId": dirout + prefixo_out+version_out,
    "scale": 30,
    "pyramidingPolicy": {
        '.default': 'mode'
    },
    "maxPixels": 1e13,
    "region": geometry
  });    

//Developed by ArcPlan Team
//Marcos Rosa, Eduardo Rosa, Mariana Dias
//Updated July 2024 - MD - mariana@arcplan.com.br
