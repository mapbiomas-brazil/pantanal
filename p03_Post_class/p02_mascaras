/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-58.52936205752952, -16.48069309590335],
          [-58.57330737002952, -17.101247170160555],
          [-58.32062182315452, -17.478882098612424],
          [-57.96905932315452, -17.656938725904308],
          [-57.77130541690452, -17.897558502926692],
          [-57.67242846377952, -18.273525077010646],
          [-57.94708666690452, -19.23060191352147],
          [-58.24371752627952, -19.71741814896459],
          [-58.29864916690452, -20.274912605306977],
          [-57.99103197940452, -20.96383809400686],
          [-58.07892260440452, -21.578107423128746],
          [-58.10089526065452, -22.230467998199895],
          [-57.41974291690452, -22.26097380469566],
          [-57.32086596377952, -21.88427321684344],
          [-57.11212572940452, -21.49635339908078],
          [-56.98028979190452, -21.056141489602602],
          [-56.82648119815452, -20.45000902167834],
          [-56.38702807315452, -20.48088774020802],
          [-55.89264330752952, -20.50147010055191],
          [-55.65094408877952, -20.50147010055191],
          [-55.10162768252952, -19.44829624235093],
          [-54.68414721377952, -18.482045076276716],
          [-54.68414721377952, -17.792981029318906],
          [-54.80499682315452, -17.048736849002278],
          [-54.82696947940452, -16.522828344097242],
          [-55.06866869815452, -16.217140881812828],
          [-55.50812182315452, -15.847575770994556],
          [-56.00250658877952, -15.604348700492018],
          [-56.71661791690452, -15.93210807445483],
          [-57.29889330752952, -15.805296326997492],
          [-57.95807299502952, -15.535558114006925],
          [-58.973632404627836, -15.897400514355134],
          [-59.290155580858844, -16.315729569211467]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//add masks with auxiliar data to remove noise 

var asset_mosaicos_col9 = 'projects/nexgenmap/MapBiomas2/LANDSAT/BRAZIL/mosaics-2';

// Create a mosaic for 2023
var mosaicoTotal = ee.ImageCollection(asset_mosaicos_col9)
                        .filterMetadata('biome', 'equals', 'PANTANAL')
                        .filterMetadata('year', 'equals', 2023)
 //                       .filter(ee.Filter.eq('satellite', asset1))
                        //.filterBounds(geometry)
                        .mosaic()
Map.addLayer(mosaicoTotal, {bands: ['swir1_median', 'nir_median', 'red_median'],gain: [0.08, 0.06, 0.2],gamma: 0.85}, 'mosaico ',false) 

// Load feature collections for different datasets
var PRODES2000 = ee.FeatureCollection('users/gee_arcplan/col9/accumulated_deforestation_2000')
print('PRODES2000',PRODES2000.limit(1))
var PRODESincrease = ee.FeatureCollection('users/gee_arcplan/col9/prodes_pos2000')
print('PRODESincrease',PRODESincrease.limit(1))
var alertas = ee.FeatureCollection('users/gee_arcplan/col9/alertas-pantanal')
print('alertas',alertas.limit(1))
var maskSemPasto = ee.FeatureCollection('users/gee_arcplan/col8/mask_sem_pasto')
print('maskSemPasto',maskSemPasto.limit(1))

// Display the feature collections
Map.addLayer(PRODES2000,{},'PRODES2000',false)
Map.addLayer(PRODESincrease,{},'PRODESincrease',false)
Map.addLayer(alertas,{},'alertas',false)
Map.addLayer(maskSemPasto,{},'maskSemPasto',false)

// Create a mask for PRODES 2000
var mask_ano2000 = PRODES2000.reduceToImage(['year'], 'mean').neq(0).remap([1],[100],0).toByte().selfMask().rename('class');

// Create a mask for the "maskSemPasto" feature collection
var maskImg = maskSemPasto.reduceToImage(['OBJECTID'], 'mean').neq(0).remap([1],[1],0).toByte().selfMask().rename('class');

// Combine the PRODES 2000 mask and the "maskSemPasto" mask
var maskProdesFinal = maskImg.blend(mask_ano2000).eq(1).selfMask().rename('class_2000');

// Display the combined mask
Map.addLayer(maskProdesFinal,{palette:'green'},'maskProdes2000',false)

///////////////////////////////////////GPT

// Create masks for PRODES increase data from 2001 to 2023
var prodes2002 = PRODESincrease.filterMetadata('year', 'equals', 2002);
var mask_ano2001 = prodes2002.reduceToImage(['year'], 'mean').neq(0).remap([1], [100], 0).toByte().selfMask().rename('class');
var maskProdesFinal01 = maskProdesFinal.blend(mask_ano2001).eq(1).selfMask().rename('class_2001');
Map.addLayer(maskProdesFinal01, {palette: '#0000FF'}, 'maskProdesFinal01', false);

var prodes2003 = PRODESincrease.filterMetadata('year', 'equals', 2003);
var mask_ano2002 = prodes2003.reduceToImage(['year'], 'mean').neq(0).remap([1], [100], 0).toByte().selfMask().rename('class');
var maskProdesFinal02 = maskProdesFinal01.blend(mask_ano2002).eq(1).selfMask().rename('class_2002');
Map.addLayer(maskProdesFinal02, {palette: '#FF0000'}, 'maskProdesFinal02', false);

var prodes2004 = PRODESincrease.filterMetadata('year', 'equals', 2004);
var mask_ano2003 = prodes2004.reduceToImage(['year'], 'mean').neq(0).remap([1], [100], 0).toByte().selfMask().rename('class');
var maskProdesFinal03 = maskProdesFinal02.blend(mask_ano2003).eq(1).selfMask().rename('class_2003');
Map.addLayer(maskProdesFinal03, {palette: '#008000'}, 'maskProdesFinal03', false);

var prodes2005 = PRODESincrease.filterMetadata('year', 'equals', 2005);
var mask_ano2004 = prodes2005.reduceToImage(['year'], 'mean').neq(0).remap([1], [100], 0).toByte().selfMask().rename('class');
var maskProdesFinal04 = maskProdesFinal03.blend(mask_ano2004).eq(1).selfMask().rename('class_2004');
Map.addLayer(maskProdesFinal04, {palette: '#FFFF00'}, 'maskProdesFinal04', false);

var prodes2006 = PRODESincrease.filterMetadata('year', 'equals', 2006);
var mask_ano2005 = prodes2006.reduceToImage(['year'], 'mean').neq(0).remap([1], [100], 0).toByte().selfMask().rename('class');
var maskProdesFinal05 = maskProdesFinal04.blend(mask_ano2005).eq(1).selfMask().rename('class_2005');
Map.addLayer(maskProdesFinal05, {palette: '#800080'}, 'maskProdesFinal05', false);

var prodes2007 = PRODESincrease.filterMetadata('year', 'equals', 2007);
var mask_ano2006 = prodes2007.reduceToImage(['year'], 'mean').neq(0).remap([1], [100], 0).toByte().selfMask().rename('class');
var maskProdesFinal06 = maskProdesFinal05.blend(mask_ano2006).eq(1).selfMask().rename('class_2006');
Map.addLayer(maskProdesFinal06, {palette: '#00FFFF'}, 'maskProdesFinal06', false);

var prodes2008 = PRODESincrease.filterMetadata('year', 'equals', 2008);
var mask_ano2007 = prodes2008.reduceToImage(['year'], 'mean').neq(0).remap([1], [100], 0).toByte().selfMask().rename('class');
var maskProdesFinal07 = maskProdesFinal06.blend(mask_ano2007).eq(1).selfMask().rename('class_2007');
Map.addLayer(maskProdesFinal07, {palette: '#FF00FF'}, 'maskProdesFinal07', false);

var prodes2009 = PRODESincrease.filterMetadata('year', 'equals', 2009);
var mask_ano2008 = prodes2009.reduceToImage(['year'], 'mean').neq(0).remap([1], [100], 0).toByte().selfMask().rename('class');
var maskProdesFinal08 = maskProdesFinal07.blend(mask_ano2008).eq(1).selfMask().rename('class_2008');
Map.addLayer(maskProdesFinal08, {palette: '#FFC0CB'}, 'maskProdesFinal08', false);

var prodes2010 = PRODESincrease.filterMetadata('year', 'equals', 2010);
var mask_ano2009 = prodes2010.reduceToImage(['year'], 'mean').neq(0).remap([1], [100], 0).toByte().selfMask().rename('class');
var maskProdesFinal09 = maskProdesFinal08.blend(mask_ano2009).eq(1).selfMask().rename('class_2009');
Map.addLayer(maskProdesFinal09, {palette: '#FFA500'}, 'maskProdesFinal09', false);

var prodes2011 = PRODESincrease.filterMetadata('year', 'equals', 2011);
var mask_ano2010 = prodes2011.reduceToImage(['year'], 'mean').neq(0).remap([1], [100], 0).toByte().selfMask().rename('class');
var maskProdesFinal10 = maskProdesFinal09.blend(mask_ano2010).eq(1).selfMask().rename('class_2010');
Map.addLayer(maskProdesFinal10, {palette: '#A52A2A'}, 'maskProdesFinal10', false);

var prodes2012 = PRODESincrease.filterMetadata('year', 'equals', 2012);
var mask_ano2011 = prodes2012.reduceToImage(['year'], 'mean').neq(0).remap([1], [100], 0).toByte().selfMask().rename('class');
var maskProdesFinal11 = maskProdesFinal10.blend(mask_ano2011).eq(1).selfMask().rename('class_2011');
Map.addLayer(maskProdesFinal11, {palette: '#808080'}, 'maskProdesFinal11', false);

var prodes2013 = PRODESincrease.filterMetadata('year', 'equals', 2013);
var mask_ano2012 = prodes2013.reduceToImage(['year'], 'mean').neq(0).remap([1], [100], 0).toByte().selfMask().rename('class');
var maskProdesFinal12 = maskProdesFinal11.blend(mask_ano2012).eq(1).selfMask().rename('class_2012');
Map.addLayer(maskProdesFinal12, {palette: '#000000'}, 'maskProdesFinal12', false);

var prodes2014 = PRODESincrease.filterMetadata('year', 'equals', 2014);
var mask_ano2013 = prodes2014.reduceToImage(['year'], 'mean').neq(0).remap([1], [100], 0).toByte().selfMask().rename('class');
var maskProdesFinal13 = maskProdesFinal12.blend(mask_ano2013).eq(1).selfMask().rename('class_2013');
Map.addLayer(maskProdesFinal13, {palette: '#FFFFFF'}, 'maskProdesFinal13', false);

var prodes2015 = PRODESincrease.filterMetadata('year', 'equals', 2015);
var mask_ano2014 = prodes2015.reduceToImage(['year'], 'mean').neq(0).remap([1], [100], 0).toByte().selfMask().rename('class');
var maskProdesFinal14 = maskProdesFinal13.blend(mask_ano2014).eq(1).selfMask().rename('class_2014');
Map.addLayer(maskProdesFinal14, {palette: '#7FFF00'}, 'maskProdesFinal14', false);

var prodes2016 = PRODESincrease.filterMetadata('year', 'equals', 2016);
var mask_ano2015 = prodes2016.reduceToImage(['year'], 'mean').neq(0).remap([1], [100], 0).toByte().selfMask().rename('class');
var maskProdesFinal15 = maskProdesFinal14.blend(mask_ano2015).eq(1).selfMask().rename('class_2015');
Map.addLayer(maskProdesFinal15, {palette: '#9932CC'}, 'maskProdesFinal15', false);

var prodes2017 = PRODESincrease.filterMetadata('year', 'equals', 2017);
var mask_ano2016 = prodes2017.reduceToImage(['year'], 'mean').neq(0).remap([1], [100], 0).toByte().selfMask().rename('class');
var maskProdesFinal16 = maskProdesFinal15.blend(mask_ano2016).eq(1).selfMask().rename('class_2016');
Map.addLayer(maskProdesFinal16, {palette: '#00FFFF'}, 'maskProdesFinal16', false);

var prodes2018 = PRODESincrease.filterMetadata('year', 'equals', 2018);
var mask_ano2017 = prodes2018.reduceToImage(['year'], 'mean').neq(0).remap([1], [100], 0).toByte().selfMask().rename('class');
var maskProdesFinal17 = maskProdesFinal16.blend(mask_ano2017).eq(1).selfMask().rename('class_2017');
Map.addLayer(maskProdesFinal17, {palette: '#FF00FF'}, 'maskProdesFinal17', false);

var prodes2019 = PRODESincrease.filterMetadata('year', 'equals', 2019);
var mask_ano2018 = prodes2019.reduceToImage(['year'], 'mean').neq(0).remap([1], [100], 0).toByte().selfMask().rename('class');
var maskProdesFinal18 = maskProdesFinal17.blend(mask_ano2018).eq(1).selfMask().rename('class_2018');
Map.addLayer(maskProdesFinal18, {palette: '#FFFF00'}, 'maskProdesFinal18', false);

var prodes2020 = PRODESincrease.filterMetadata('year', 'equals', 2020);
var mask_ano2019 = prodes2020.reduceToImage(['year'], 'mean').neq(0).remap([1], [100], 0).toByte().selfMask().rename('class');
var maskProdesFinal19 = maskProdesFinal18.blend(mask_ano2019).eq(1).selfMask().rename('class_2019');
Map.addLayer(maskProdesFinal19, {palette: '#800080'}, 'maskProdesFinal19', false);

var prodes2021 = PRODESincrease.filterMetadata('year', 'equals', 2021);
var mask_ano2020 = prodes2021.reduceToImage(['year'], 'mean').neq(0).remap([1], [100], 0).toByte().selfMask().rename('class');
var maskProdesFinal20 = maskProdesFinal19.blend(mask_ano2020).eq(1).selfMask().rename('class_2020');
Map.addLayer(maskProdesFinal20, {palette: '#00FFFF'}, 'maskProdesFinal20', false);

var prodes2022 = PRODESincrease.filterMetadata('year', 'equals', 2022);
var mask_ano2021 = prodes2022.reduceToImage(['year'], 'mean').neq(0).remap([1], [100], 0).toByte().selfMask().rename('class');
var maskProdesFinal21 = maskProdesFinal20.blend(mask_ano2021).eq(1).selfMask().rename('class_2021');
Map.addLayer(maskProdesFinal21, {palette: '#FF00FF'}, 'maskProdesFinal21', false);

var maskProdesFinal22 = maskProdesFinal21.blend(mask_ano2021).eq(1).selfMask().rename('class_2022');

var maskProdesFinal23 = maskProdesFinal22.blend(mask_ano2021).eq(1).selfMask().rename('class_2023');


//var incremento_ano2000 = PRODES2000.filterMetadata('year', 'equals', 2000)
 // Create a mask for the year 2000 from the PRODES2000 dataset
 var mask_ano2000 = PRODES2000.reduceToImage(['year'], 'mean').neq(0).remap([1],[100],0).toByte().selfMask().rename('class');
// Create a mask for the non-pasture areas
var maskImg = maskSemPasto.reduceToImage(['OBJECTID'], 'mean').neq(0).remap([1],[1],0).toByte().selfMask().rename('class');

// Blend the two masks and select only the pixels that are equal to 1
var maskProdesFinal00 = maskImg.blend(mask_ano2000).eq(1).selfMask().rename('class_2000');

// Add the mask to the map
Map.addLayer(maskProdesFinal,{palette:'green'},'maskProdes2000',false)



// Create masks for each year from 1985 to 1999
var maskProdesFinal_1985 = maskImg.blend(mask_ano2000).eq(1).selfMask().rename('class_1985');
Map.addLayer(maskProdesFinal_1985, {palette: '#0000FF'}, 'maskProdesFinal_1985', false);

var maskProdesFinal_1986 = maskImg.blend(mask_ano2000).eq(1).selfMask().rename('class_1986');
Map.addLayer(maskProdesFinal_1986, {palette: '#FF0000'}, 'maskProdesFinal_1986', false);

var maskProdesFinal_1987 = maskImg.blend(mask_ano2000).eq(1).selfMask().rename('class_1987');
Map.addLayer(maskProdesFinal_1987, {palette: '#008000'}, 'maskProdesFinal_1987', false);

var maskProdesFinal_1988 = maskImg.blend(mask_ano2000).eq(1).selfMask().rename('class_1988');
Map.addLayer(maskProdesFinal_1988, {palette: '#FFFF00'}, 'maskProdesFinal_1988', false);

var maskProdesFinal_1989 = maskImg.blend(mask_ano2000).eq(1).selfMask().rename('class_1989');
Map.addLayer(maskProdesFinal_1989, {palette: '#800080'}, 'maskProdesFinal_1989', false);

var maskProdesFinal_1990 = maskImg.blend(mask_ano2000).eq(1).selfMask().rename('class_1990');
Map.addLayer(maskProdesFinal_1990, {palette: '#00FFFF'}, 'maskProdesFinal_1990', false);

var maskProdesFinal_1991 = maskImg.blend(mask_ano2000).eq(1).selfMask().rename('class_1991');
Map.addLayer(maskProdesFinal_1991, {palette: '#FF00FF'}, 'maskProdesFinal_1991', false);

var maskProdesFinal_1992 = maskImg.blend(mask_ano2000).eq(1).selfMask().rename('class_1992');
Map.addLayer(maskProdesFinal_1992, {palette: '#0000FF'}, 'maskProdesFinal_1992', false);

var maskProdesFinal_1993 = maskImg.blend(mask_ano2000).eq(1).selfMask().rename('class_1993');
Map.addLayer(maskProdesFinal_1993, {palette: '#FF0000'}, 'maskProdesFinal_1993', false);

var maskProdesFinal_1994 = maskImg.blend(mask_ano2000).eq(1).selfMask().rename('class_1994');
Map.addLayer(maskProdesFinal_1994, {palette: '#008000'}, 'maskProdesFinal_1994', false);

var maskProdesFinal_1995 = maskImg.blend(mask_ano2000).eq(1).selfMask().rename('class_1995');
Map.addLayer(maskProdesFinal_1995, {palette: '#FFFF00'}, 'maskProdesFinal_1995', false);

var maskProdesFinal_1996 = maskImg.blend(mask_ano2000).eq(1).selfMask().rename('class_1996');
Map.addLayer(maskProdesFinal_1996, {palette: '#800080'}, 'maskProdesFinal_1996', false);

var maskProdesFinal_1997 = maskImg.blend(mask_ano2000).eq(1).selfMask().rename('class_1997');
Map.addLayer(maskProdesFinal_1997, {palette: '#00FFFF'}, 'maskProdesFinal_1997', false);

var maskProdesFinal_1998 = maskImg.blend(mask_ano2000).eq(1).selfMask().rename('class_1998');
Map.addLayer(maskProdesFinal_1998, {palette: '#FF00FF'}, 'maskProdesFinal_1998', false);

var maskProdesFinal_1999 = maskImg.blend(mask_ano2000).eq(1).selfMask().rename('class_1999');
Map.addLayer(maskProdesFinal_1999, {palette: '#000000'}, 'maskProdesFinal_1999', false);


// Combine all the masks into a single image
var mascara_final = maskProdesFinal_1985
    .addBands(maskProdesFinal_1986)
    .addBands(maskProdesFinal_1987)
    .addBands(maskProdesFinal_1988)
    .addBands(maskProdesFinal_1989)
    .addBands(maskProdesFinal_1990)
    .addBands(maskProdesFinal_1991)
    .addBands(maskProdesFinal_1992)
    .addBands(maskProdesFinal_1993)
    .addBands(maskProdesFinal_1994)
    .addBands(maskProdesFinal_1995)
    .addBands(maskProdesFinal_1996)
    .addBands(maskProdesFinal_1997)
    .addBands(maskProdesFinal_1998)
    .addBands(maskProdesFinal_1999)
    .addBands(maskProdesFinal00)
    .addBands(maskProdesFinal01)
    .addBands(maskProdesFinal02)
    .addBands(maskProdesFinal03)
    .addBands(maskProdesFinal04)
    .addBands(maskProdesFinal05)
    .addBands(maskProdesFinal06)
    .addBands(maskProdesFinal07)
    .addBands(maskProdesFinal08)
    .addBands(maskProdesFinal09)
    .addBands(maskProdesFinal10)
    .addBands(maskProdesFinal11)
    .addBands(maskProdesFinal12)
    .addBands(maskProdesFinal13)
    .addBands(maskProdesFinal14)
    .addBands(maskProdesFinal15)
    .addBands(maskProdesFinal16)
    .addBands(maskProdesFinal17)
        .addBands(maskProdesFinal18)
            .addBands(maskProdesFinal19)
                .addBands(maskProdesFinal20)
                    .addBands(maskProdesFinal21)
                    .addBands(maskProdesFinal22)
                    .addBands(maskProdesFinal23)
    
print('MASCARA ANO A ANO:',mascara_final )    
    

//Acrescenta mascara de áreas de pastagens naturais para eviatr FP de pastagem exótica e adiciona dados do MapBiomas Alertas

// Load the MapBiomas collection 9
var col9 = ee.Image('projects/mapbiomas-workspace/COLECAO9/classificacao-pantanal/PANT_col9_Anual_p03g_04')
print('col9', col9)

// Define the asset path for the mosaics
var asset_mosaicos_col9 = 'projects/nexgenmap/MapBiomas2/LANDSAT/BRAZIL/mosaics-2';
// Load the biomes image
var biomes = ee.Image('projects/mapbiomas-workspace/AUXILIAR/biomas-raster-41');
// Mask the biomes image to only include the Pantanal biome
var bioma250mil_PANT = biomes.mask(biomes.eq(3));
Map.addLayer(bioma250mil_PANT,{},'Bioma',false);

// Load the palettes
var palettes = require('users/mapbiomas/modules:Palettes.js');
// Define the visualization parameters for the MapBiomas collection 8
var vis = {
    'min': 0,
    'max': 62,
    'palette': palettes.get('classification8')
};
// Define the visualization parameters for the classification_2023 band
var vis2 = {
    'bands': 'classification_2023',
    'min': 0,
    'max': 62,
    'palette': palettes.get('classification8')
};

//mascara do sem pasto



// Define the years to process
var anos = [1985,
            1986,1987,
            1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,
            2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,
            2012, 2013,2014,2015,2016,2017,
            2018,2019,2020,2021,
            2022,2023
            ];
            
// Loop through each year
for (var i_ano=0;i_ano<anos.length; i_ano++){
  // Get the current year
  var ano = anos[i_ano];
 // Create a mask for the current year from the final mask
 var mask_semPasto = mascara_final.select('class_'+ano).remap([1],[100])
 // Select the classification band for the current year
 var image_ano = col9.select('classification_'+ano)
 // Add the mask to the classification band and remap the values
 var ano_corr = image_ano.add(mask_semPasto).remap([3,4,12,19,21,22,25,33,103,104,112,119,121,122,125,133],
                                                   [3,4,12,19,21,22,25,33,  3,  4, 12, 12, 12, 22, 25, 33])

// Blend the original classification band with the corrected band
var saida_ano = image_ano.blend(ano_corr.rename('classification_'+ano))

 // Create an image collection from the mosaics asset
 var mosaicoTotal = ee.ImageCollection(asset_mosaicos_col9)
                        .filterMetadata('biome', 'equals', 'PANTANAL')
                        .filterMetadata('year', 'equals', ano)
 //                       .filter(ee.Filter.eq('satellite', asset1))
                        //.filterBounds(geometry)
                        .mosaic()
//Map.addLayer(mosaicoTotal, {bands: ['swir1_median', 'nir_median', 'red_median'],gain: [0.08, 0.06, 0.2],gamma: 0.85}, 'mosaico '+ano,false) 
//Map.addLayer(mosaicoTotal, {bands: ['swir1_median_wet', 'nir_median_wet', 'red_median_wet'],gain: [0.08, 0.06, 0.2],gamma: 0.85}, 'mosaico wet '+ano,false) 
//Map.addLayer(col8.select(['classification_'+ano]),vis,'Original '+ano,false)
//Map.addLayer(saida_ano,vis,'corrigido '+ano,false)
   // If it's the first iteration, initialize the output image
   if (i_ano == 0){ var class_outTotal = saida_ano}  
  // Otherwise, add the current year's image to the output image
  else {class_outTotal = class_outTotal.addBands(saida_ano)}
}

// Print the output image
print('com mascara pasto',class_outTotal)
// Add the output image to the map
Map.addLayer(class_outTotal,{},'col pasto',false)

//adiciona mascara dos alertas
// Load the alerts dataset
var alertas = alertas

// Print the alerts dataset
print('Alertas', alertas)//distinct('AnoDetec')) //2019 -2020 - 2021 - 2022


// Filter the alerts dataset by year
var alertas19 = alertas.filterMetadata('ANODETEC', 'equals', 2019)
var alertas20 = alertas.filterMetadata('ANODETEC', 'equals', 2020)
var alertas21 = alertas.filterMetadata('ANODETEC', 'equals', 2021)
var alertas22 = alertas.filterMetadata('ANODETEC', 'equals', 2022)
var alertas23 = alertas.filterMetadata('ANODETEC', 'equals', 2023)
//print(alertas19)
//print(alertas20)
//print(alertas21)
//print(alertas22)


// Create masks for each year from the alerts dataset
var mask_19 = alertas19.reduceToImage(['ANODETEC'], 'mean').neq(0).remap([1],[100]).toByte().selfMask();
var mask_20 = alertas20.reduceToImage(['ANODETEC'], 'mean').neq(0).remap([1],[100]).toByte().selfMask();
var mask_21 = alertas21.reduceToImage(['ANODETEC'], 'mean').neq(0).remap([1],[100]).toByte().selfMask();
var mask_22 = alertas22.reduceToImage(['ANODETEC'], 'mean').neq(0).remap([1],[100]).toByte().selfMask();
var mask_23 = alertas23.reduceToImage(['ANODETEC'], 'mean').neq(0).remap([1],[100]).toByte().selfMask();



// Add the masks to the map
Map.addLayer(mask_19)
Map.addLayer(mask_20)
Map.addLayer(mask_21)
Map.addLayer(mask_22,{},'alertas 2022')
Map.addLayer(mask_23)

// Define the years to process
var anos = [2019,2020,2021,
            2022,2023
            ];
            
// Loop through each year
for (var i_ano=0;i_ano<anos.length; i_ano++){
  // Get the current year
  var ano = anos[i_ano];

// Add the mask to the classification band and remap the values
var corrigido = class_outTotal.select('classification_'+ano).add(mask_19).remap([3,4,12,19,21,22,25,33,103,104,112,119,121,122,125,133],
                                                                                [3,4,12,19,21,22,25,33, 21, 21, 21, 21, 21, 21, 21, 33])

// Blend the original classification band with the corrected band
var saida = class_outTotal.select('classification_'+ano).blend(corrigido.rename('classification_'+ano))
// If it's the first iteration, initialize the output image
if (i_ano == 0){ var class_outTotal2 = saida}  
// Otherwise, add the current year's image to the output image
  else {class_outTotal2 = class_outTotal2.addBands(saida)}

}

// Print the output image
print('teste 2019', class_outTotal2)


// Define the years to process
var anos = [2020,2021,
            2022,2023
            ];
            
// Loop through each year
for (var i_ano=0;i_ano<anos.length; i_ano++){
  // Get the current year
  var ano = anos[i_ano];

// Add the mask to the classification band and remap the values
var corrigido = class_outTotal2.select('classification_'+ano).add(mask_20).remap([3,4,12,19,21,22,25,33,103,104,112,119,121,122,125,133],
                                                                                [3,4,12,19,21,22,25,33, 21, 21, 21, 21, 21, 21, 21, 33])

// Blend the original classification band with the corrected band
var saida = class_outTotal2.select('classification_'+ano).blend(corrigido.rename('classification_'+ano))
// If it's the first iteration, initialize the output image
if (i_ano == 0){ var class_outTotal3 = saida}  
// Otherwise, add the current year's image to the output image
  else {class_outTotal3 = class_outTotal3.addBands(saida)}

}

// Print the output image
print('teste 2020', class_outTotal3)

// Define the years to process
var anos = [2021,
            2022,2023
            ];
            
            
// Loop through each year
for (var i_ano=0;i_ano<anos.length; i_ano++){
  // Get the current year
  var ano = anos[i_ano];

// Add the mask to the classification band and remap the values
var corrigido = class_outTotal3.select('classification_'+ano).add(mask_21).remap([3,4,12,19,21,22,25,33,103,104,112,119,121,122,125,133],
                                                                                [3,4,12,19,21,22,25,33, 21, 21, 21, 21, 21, 21, 21, 33])

// Blend the original classification band with the corrected band
var saida = class_outTotal3.select('classification_'+ano).blend(corrigido.rename('classification_'+ano))
// If it's the first iteration, initialize the output image
if (i_ano == 0){ var class_outTotal4 = saida}  
// Otherwise, add the current year's image to the output image
  else {class_outTotal4 = class_outTotal4.addBands(saida)}

}

// Print the output image
print('teste 2021', class_outTotal4)

// Define the years to process
var anos = [
            2022,2023
            ];
            
// Loop through each year
for (var i_ano=0;i_ano<anos.length; i_ano++){
  // Get the current year
  var ano = anos[i_ano];

// Add the mask to the classification band and remap the values
var corrigido = class_outTotal4.select('classification_'+ano).add(mask_22).remap([3,4,12,19,21,22,25,33,103,104,112,119,121,122,125,133],
                                                                                [3,4,12,19,21,22,25,33, 21, 21, 21, 21, 21, 21, 21, 33])

// Blend the original classification band with the corrected band
var saida = class_outTotal4.select('classification_'+ano).blend(corrigido.rename('classification_'+ano))
// If it's the first iteration, initialize the output image
if (i_ano == 0){ var class_outTotal5 = saida}  
// Otherwise, add the current year's image to the output image
  else {class_outTotal5 = class_outTotal5.addBands(saida)}

}

// Print the output image
print('teste 2022', class_outTotal5)


// Define the years to process
var anos = [
            2023
            ];
            
// Loop through each year
for (var i_ano=0;i_ano<anos.length; i_ano++){
  // Get the current year
  var ano = anos[i_ano];

// Add the mask to the classification band and remap the values
var corrigido = class_outTotal5.select('classification_'+ano).add(mask_23).remap([3,4,12,19,21,22,25,33,103,104,112,119,121,122,125,133],
                                                                                [3,4,12,19,21,22,25,33, 21, 21, 21, 21, 21, 21, 21, 33])

// Blend the original classification band with the corrected band
var saida = class_outTotal5.select('classification_'+ano).blend(corrigido.rename('classification_'+ano))
// If it's the first iteration, initialize the output image
if (i_ano == 0){ var class_outTotal6 = saida}  
// Otherwise, add the current year's image to the output image
  else {class_outTotal6 = class_outTotal6.addBands(saida)}

}

// Print the output image
print('teste 2023', class_outTotal6)

// Add the original and corrected images to the map
Map.addLayer(class_outTotal,vis2,'original! 2019')
Map.addLayer(class_outTotal6,vis2,'teste 2019')



// Define the band names
var bandNames =  ['classification_1985','classification_1986','classification_1987','classification_1988',
                  'classification_1989','classification_1990','classification_1991','classification_1992',
                  'classification_1993','classification_1994','classification_1995','classification_1996',
                  'classification_1997','classification_1998','classification_1999','classification_2000',
                  'classification_2001','classification_2002','classification_2003','classification_2004',
                  'classification_2005','classification_2006','classification_2007','classification_2008',
                  'classification_2009','classification_2010','classification_2011','classification_2012',
                  'classification_2013','classification_2014','classification_2015','classification_2016',
                  'classification_2017','classification_2018']

// Combine all the images into a single image
var vfinal = class_outTotal.select(bandNames).addBands(class_outTotal2.select('classification_2019'))
                                             .addBands(class_outTotal3.select('classification_2020'))
                                             .addBands(class_outTotal4.select('classification_2021'))
                                             .addBands(class_outTotal5.select('classification_2022'))
                                             .addBands(class_outTotal6.select('classification_2023'))

// Print the output image
print('vfinal',vfinal)

// Add the output image to the map
Map.addLayer(vfinal,{},'vfinal',false)



// Define the years to process
var anos = [1985,
            1986,1987,
            1988,
//            1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,
//            2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,
//            2012, 2013,2014,2015,2016,
            2017,
            2018,2019,2020,2021,
            2022,2023
            ];
            
// Loop through each year
for (var i_ano=0;i_ano<anos.length; i_ano++){
  // Get the current year
  var ano = anos[i_ano];
  
   // Create an image collection from the mosaics asset
   var mosaicoTotal = ee.ImageCollection(asset_mosaicos_col9)
                        .filterMetadata('biome', 'equals', 'PANTANAL')
                        .filterMetadata('year', 'equals', ano)
 //                       .filter(ee.Filter.eq('satellite', asset1))
                        //.filterBounds(geometry)
                        .mosaic()
// Add the mosaics to the map
Map.addLayer(mosaicoTotal, {bands: ['swir1_median', 'nir_median', 'red_median'],gain: [0.08, 0.06, 0.2],gamma: 0.85}, 'mosaico '+ano,false) 
Map.addLayer(mosaicoTotal, {bands: ['swir1_median_wet', 'nir_median_wet', 'red_median_wet'],gain: [0.08, 0.06, 0.2],gamma: 0.85}, 'mosaico wet '+ano,false) 
// Add the original and corrected images to the map
Map.addLayer(col9.select(['classification_'+ano]),vis,'Original '+ano,false)
Map.addLayer(vfinal.select(['classification_'+ano]),vis,'corrigido '+ano,false)

}


////corrigir FP de pastagem com frequencia de inundação mensal
// Set the final image to the vfinal image
var col9 = vfinal

// Load the monthly flood frequency image
var freqAlagado = ee.Image('projects/mapbiomas-workspace/AMOSTRAS/col8/PANTANAL/SAMPLES/mensal/frequenciaAcumulada_33_11_v2')
 
 


// Define the years to process
var anos = [
            1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,
            2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,
            2012, 2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023
            ];


 // Create a mask for areas with a flood frequency greater than 115
 var to_mask_campo = freqAlagado.select('class').gt(115).remap([1],[100],0).toByte().selfMask()  

// Loop through each year
for (var i_ano=0;i_ano<anos.length; i_ano++){
  // Get the current year
  var ano = anos[i_ano];

// Add the mask to the classification band and remap the values
var class_corr_agr_ano = col9.select('classification_'+ano).add(to_mask_campo)
                         .remap([3,4,12,19,21,22,25,33,103,104,112,119,121,122,125,133],
                                [3,4,12,19,21,22,25,33,  3,  4, 12, 12, 12, 22, 25, 33])


// Blend the original classification band with the corrected band
var saida_ano = col9.select('classification_'+ano).blend(class_corr_agr_ano.rename('classification_'+ano))

 // Create an image collection from the mosaics asset
 var mosaicoTotal = ee.ImageCollection(asset_mosaicos_col9)
                        .filterMetadata('biome', 'equals', 'PANTANAL')
                        .filterMetadata('year', 'equals', ano)
 //                       .filter(ee.Filter.eq('satellite', asset1))
                        //.filterBounds(geometry)
                        .mosaic()
// Add the mosaics to the map
Map.addLayer(mosaicoTotal, {bands: ['swir1_median', 'nir_median', 'red_median'],gain: [0.08, 0.06, 0.2],gamma: 0.85}, 'mosaico '+ano,false) 
// Add the original and corrected images to the map
Map.addLayer(col9.select(['classification_'+ano]),vis,'Original '+ano,false)
Map.addLayer(saida_ano,vis,'corrigido mask '+ano,false)

   // If it's the first iteration, initialize the output image
   if (i_ano == 0){ var class_outTotal_mask = saida_ano}  
  // Otherwise, add the current year's image to the output image
  else {class_outTotal_mask = class_outTotal_mask.addBands(saida_ano)}
}

 // Define the asset path for the mosaics
var asset_mosaicos_col9 = 'projects/nexgenmap/MapBiomas2/LANDSAT/BRAZIL/mosaics-2';

// Load the MapBiomas collection 9
var col9 =  class_outTotal_mask
Map.addLayer(col9,{},'coleção',false)

// Load the trajectories, presence, and change images for agriculture
var trajetoriaagr = ee.Image('users/gee_arcplan/col9/trajectories_19_comModa')
var npresenceagr = ee.Image('users/gee_arcplan/col9/number_of_presence_19_comModa')
var nchangeagr = ee.Image('users/gee_arcplan/col9/number_of_changes_19_comModa')

// Load the trajectories, presence, and change images for pasture
var trajetoriapast = ee.Image('users/gee_arcplan/col9/trajectories_21_comModa')
var npresencepast = ee.Image('users/gee_arcplan/col9/number_of_presence_21_comModa')
var nchangepast = ee.Image('users/gee_arcplan/col9/number_of_changes_21_comModa')



// Load the palettes
var palettes = require('users/mapbiomas/modules:Palettes.js');
// Define the visualization parameters for the classification images
var vis = {
    'min': 0,
    'max': 45,
    'palette': palettes.get('classification5')
};
// Define the years to process
var anos = [
            1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,
            2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,
            2012, 2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023
            ];

// Filter agriculture trajectories based on values 2, 4, and 7
// Filter agriculture presence based on values greater than 20
var maskTrajAgr1 = trajetoriaagr.eq(1).toByte().selfMask().remap([1],[100]).toByte().selfMask()
var maskTrajAgr3 = trajetoriaagr.eq(3).toByte().selfMask().remap([1],[100]).toByte().selfMask()
var maskTrajAgr5 = trajetoriaagr.eq(5).toByte().selfMask().remap([1],[100]).toByte().selfMask()
var maskTrajAgr6 = trajetoriaagr.eq(6).toByte().selfMask().remap([1],[100]).toByte().selfMask()


// Combine the agriculture trajectory masks
var maskTraj = maskTrajAgr1.blend(maskTrajAgr3).blend(maskTrajAgr5).blend(maskTrajAgr6).toByte().selfMask()

//Map.addLayer(maskTrajAgr6,{},'maskTrajAgr6',false)
//Map.addLayer(maskTraj,{},'maskTraj',false)
// Create a mask for agriculture presence less than 20
var maskPresAgr = npresenceagr.lt(20).toByte().selfMask().remap([1],[100]).toByte().selfMask()

// Combine the agriculture trajectory and presence masks
var errosAgr = maskTraj.and(maskPresAgr).remap([1],[100]).toByte().selfMask()
// Add the errors mask to the map
Map.addLayer(errosAgr,{palette:'red'},'errosAgr',false)

// Loop through each year
for (var i_ano=0;i_ano<anos.length; i_ano++){
    // Get the current year
    var ano = anos[i_ano];
    
    
// Add the errors mask to the classification band and remap the values
var class_corr_agr_ano = col9.select('classification_'+ano).add(errosAgr)
                         .remap([3,4,11,12,19,21,22,25,33,103,104,111,112,119,121,122,125,133],
                                [3,4,11,12,19,21,22,25,33, 3, 4,   11, 12, 12, 21, 22, 25, 33])


// Blend the original classification band with the corrected band
var saida_ano = col9.select('classification_'+ano).blend(class_corr_agr_ano.rename('classification_'+ano))

   // If it's the first iteration, initialize the output image
   if (i_ano == 0){ var class_outTotal = saida_ano}  
  // Otherwise, add the current year's image to the output image
  else {class_outTotal = class_outTotal.addBands(saida_ano)}
}



// FILTRO TEMPORAL PASTAGEM 

// Define the years to process
var anos = [
            1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,
            2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,
            2012, 2013,2014,2015,2016,2017,2018,2019,2020,2021,2022
            ];

// Combine the 1985 and 2023 bands
var class_outTotal2 = class_outTotal.select('classification_1985').addBands(class_outTotal.select('classification_2023'))
// Loop through each year
for (var i_ano=0;i_ano<anos.length; i_ano++){
  // Get the current year
  var ano = anos[i_ano];

  // Create a mask for pasture transitions
  var to_mask_camp = class_outTotal.select('classification_'+(ano-1)).eq(21)
                .and(class_outTotal.select('classification_'+ano).neq(21))
                .and(class_outTotal.select('classification_'+(ano+1)).eq(21)).remap([1],[100],0).toByte().selfMask()    


// Add the mask to the classification band and remap the values
var class_corr_campv_ano = class_outTotal.select('classification_'+ano).add(to_mask_camp)
                         .remap([3,4,12,19,21,22,25,33,103,104,112,119,121,122,125,133],
                                [3,4,12,19,21,22,25,33, 21,  21,21,21, 21, 21, 21, 21])


//Map.addLayer(class_corr_sav_ano,vis,'teste')



// Blend the original classification band with the corrected band
var saida_ano = class_outTotal.select('classification_'+ano).blend(class_corr_campv_ano.rename('classification_'+ano))

 // Create an image collection from the mosaics asset
 var mosaicoTotal = ee.ImageCollection(asset_mosaicos_col9)
                        .filterMetadata('biome', 'equals', 'PANTANAL')
                        .filterMetadata('year', 'equals', ano)
 //                       .filter(ee.Filter.eq('satellite', asset1))
                        //.filterBounds(geometry)
                        .mosaic()
//Map.addLayer(mosaicoTotal, {bands: ['swir1_median', 'nir_median', 'red_median'],gain: [0.08, 0.06, 0.2],gamma: 0.85}, 'mosaico '+ano,false) 
//Map.addLayer(class_outTotal.select(['classification_'+ano]),vis,'Original 2 '+ano,false)
//Map.addLayer(saida_ano,vis,'corrigido '+ano,false)

   // If it's the first iteration, initialize the output image
   if (i_ano == 0){ var class_outTotal3 = saida_ano.addBands(class_outTotal2)}  
  // Otherwise, add the current year's image to the output image
  else {class_outTotal3 = class_outTotal3.addBands(saida_ano)}
}

// Set the output image to the class_outTotal3 image
var col7 = class_outTotal3

// Define the years to process
var anos = [
            1985,1986, 1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,
            2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,
            2012, 2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023
            ];


// Loop through each year
for (var i_ano=0;i_ano<anos.length; i_ano++){
  // Get the current year
  var ano = anos[i_ano];
  
  // Select the classification band for the current year
  var class_ano = col7.select('classification_'+ano)
  // Initialize the corrected classification band
  var class_corr = class_ano
  // If the year is between 1992 and 1999
  if (ano >= 1992) {
    if (ano <= 1999) {
    // Create a mask for stable pasture in 1990 and 1991
    var pasto_estavel = col7.select('classification_1990').eq(21)
                  .add(col7.select('classification_1991').eq(21))
    // Remap the mask to 21
    pasto_estavel = pasto_estavel.remap([2],[21])
    // Blend the original classification band with the stable pasture mask
    class_corr = class_ano.blend(pasto_estavel)
    }
  }  // If the year is between 1993 and 2000
  if (ano >= 1993) {
    if (ano <= 2000) {
    // Create a mask for stable pasture in 1991 and 1992
    var pasto_estavel1 = col7.select('classification_1991').eq(21)
                  .add(col7.select('classification_1992').eq(21))
    // Remap the mask to 21
    pasto_estavel1 = pasto_estavel1.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }
  // If the year is between 1994 and 2001
  if (ano >= 1994) {
    if (ano <= 2001) {
    // Create a mask for stable pasture in 1992 and 1993
    var pasto_estavel2 = col7.select('classification_1992').eq(21)
                  .add(col7.select('classification_1993').eq(21))
    // Remap the mask to 21
    pasto_estavel2 = pasto_estavel2.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel2)
    }
  }
  // If the year is between 1995 and 2002
  if (ano >= 1995) {
    if (ano <= 2002) {
    // Create a mask for stable pasture in 1993 and 1994
    var pasto_estavel = col7.select('classification_1993').eq(21)
                  .add(col7.select('classification_1994').eq(21))
    // Remap the mask to 21
    pasto_estavel = pasto_estavel.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }
  // If the year is between 1996 and 2003
  if (ano >= 1996) {
    if (ano <= 2003) {
    // Create a mask for stable pasture in 1994 and 1995
    var pasto_estavel1 = col7.select('classification_1994').eq(21)
                  .add(col7.select('classification_1995').eq(21))
    // Remap the mask to 21
    pasto_estavel1 = pasto_estavel1.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }
  // If the year is between 1997 and 2004
  if (ano >= 1997) {
    if (ano <= 2004) {
    // Create a mask for stable pasture in 1995 and 1996
    var pasto_estavel = col7.select('classification_1995').eq(21)
                  .add(col7.select('classification_1996').eq(21))
    // Remap the mask to 21
    pasto_estavel = pasto_estavel.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }
  // If the year is between 1998 and 2005
  if (ano >= 1998) {
    if (ano <= 2005) {
    // Create a mask for stable pasture in 1996 and 1997
    var pasto_estavel1 = col7.select('classification_1996').eq(21)
                  .add(col7.select('classification_1997').eq(21))
    // Remap the mask to 21
    pasto_estavel1 = pasto_estavel1.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }
  // If the year is between 1999 and 2006
  if (ano >= 1999) {
    if (ano <= 2006) {
    // Create a mask for stable pasture in 1997 and 1998
    var pasto_estavel = col7.select('classification_1997').eq(21)
                  .add(col7.select('classification_1998').eq(21))
    // Remap the mask to 21
    pasto_estavel = pasto_estavel.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }
  // If the year is between 2000 and 2007
  if (ano >= 2000) {
    if (ano <= 2007) {
    // Create a mask for stable pasture in 1998 and 1999
    var pasto_estavel1 = col7.select('classification_1998').eq(21)
                  .add(col7.select('classification_1999').eq(21))
    // Remap the mask to 21
    pasto_estavel1 = pasto_estavel1.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }
  // If the year is between 2001 and 2008
  if (ano >= 2001) {
    if (ano <= 2008) {
    // Create a mask for stable pasture in 1999 and 2000
    var pasto_estavel = col7.select('classification_1999').eq(21)
                  .add(col7.select('classification_2000').eq(21))
    // Remap the mask to 21
    pasto_estavel = pasto_estavel.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }
  // If the year is between 2002 and 2009
  if (ano >= 2002) {
    if (ano <= 2009) {
    // Create a mask for stable pasture in 2000 and 2001
    var pasto_estavel1 = col7.select('classification_2000').eq(21)
                  .add(col7.select('classification_2001').eq(21))
    // Remap the mask to 21
    pasto_estavel1 = pasto_estavel1.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }
  // If the year is between 2003 and 2010
  if (ano >= 2003) {
    if (ano <= 2010) {
    // Create a mask for stable pasture in 2001 and 2002
    var pasto_estavel = col7.select('classification_2001').eq(21)
                  .add(col7.select('classification_2002').eq(21))
    // Remap the mask to 21
    pasto_estavel = pasto_estavel.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }
  // If the year is between 2004 and 2011
  if (ano >= 2004) {
    if (ano <= 2011) {
     // Create a mask for stable pasture in 2002 and 2003
     var pasto_estavel1 = col7.select('classification_2002').eq(21)
                    .add(col7.select('classification_2003').eq(21))
    // Remap the mask to 21
    pasto_estavel1 = pasto_estavel1.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }  // If the year is between 2005 and 2012
  if (ano >= 2005) {
    if (ano <= 2012) {
     // Create a mask for stable pasture in 2003 and 2004
     var pasto_estavel = col7.select('classification_2003').eq(21)
                    .add(col7.select('classification_2004').eq(21))
    // Remap the mask to 21
    pasto_estavel = pasto_estavel.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }  // If the year is between 2006 and 2013
  if (ano >= 2006) {
    if (ano <= 2013) {
     // Create a mask for stable pasture in 2004 and 2005
     var pasto_estavel1 = col7.select('classification_2004').eq(21)
                    .add(col7.select('classification_2005').eq(21))
    // Remap the mask to 21
    pasto_estavel1 = pasto_estavel1.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }
  // If the year is between 2007 and 2014
  if (ano >= 2007) {
    if (ano <= 2014) {
     // Create a mask for stable pasture in 2005 and 2006
     var pasto_estavel = col7.select('classification_2005').eq(21)
                    .add(col7.select('classification_2006').eq(21))
    // Remap the mask to 21
    pasto_estavel = pasto_estavel.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }  // If the year is between 2008 and 2015
  if (ano >= 2008) {
    if (ano <= 2015) {
     // Create a mask for stable pasture in 2006 and 2007
     var pasto_estavel1 = col7.select('classification_2006').eq(21)
                    .add(col7.select('classification_2007').eq(21))
    // Remap the mask to 21
    pasto_estavel1 = pasto_estavel1.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }    // If the year is between 2009 and 2016
  if (ano >= 2009) {
    if (ano <= 2016) {
     // Create a mask for stable pasture in 2007 and 2008
     var pasto_estavel = col7.select('classification_2007').eq(21)
                    .add(col7.select('classification_2008').eq(21))
    // Remap the mask to 21
    pasto_estavel = pasto_estavel.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }    // If the year is between 2010 and 2017
   if (ano >= 2010) {
    if (ano <= 2017) {
     // Create a mask for stable pasture in 2008 and 2009
     var pasto_estavel1 = col7.select('classification_2008').eq(21)
                    .add(col7.select('classification_2009').eq(21))
    // Remap the mask to 21
    pasto_estavel1 = pasto_estavel1.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }    // If the year is between 2011 and 2018
   if (ano >= 2011) {
    if (ano <= 2018) {
     // Create a mask for stable pasture in 2009 and 2010
     var pasto_estavel = col7.select('classification_2009').eq(21)
                    .add(col7.select('classification_2010').eq(21))
    // Remap the mask to 21
    pasto_estavel = pasto_estavel.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }    // If the year is between 2012 and 2019
   if (ano >= 2012) {
    if (ano <= 2019) {
     // Create a mask for stable pasture in 2010 and 2011
     var pasto_estavel1 = col7.select('classification_2010').eq(21)
                    .add(col7.select('classification_2011').eq(21))
    // Remap the mask to 21
    pasto_estavel1 = pasto_estavel1.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }    // If the year is between 2013 and 2020
   if (ano >= 2013) {
    if (ano <= 2020) {
     // Create a mask for stable pasture in 2011 and 2012
     var pasto_estavel = col7.select('classification_2011').eq(21)
                    .add(col7.select('classification_2012').eq(21))
    // Remap the mask to 21
    pasto_estavel = pasto_estavel.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }    // If the year is between 2014 and 2021
   if (ano >= 2014) {
    if (ano <= 2021) {
     // Create a mask for stable pasture in 2012 and 2013
     var pasto_estavel1 = col7.select('classification_2012').eq(21)
                    .add(col7.select('classification_2013').eq(21))
    // Remap the mask to 21
    pasto_estavel1 = pasto_estavel1.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }    // If the year is between 2015 and 2022
   if (ano >= 2015) {
    if (ano <= 2022) {
     // Create a mask for stable pasture in 2013 and 2014
     var pasto_estavel = col7.select('classification_2013').eq(21)
                    .add(col7.select('classification_2014').eq(21))
    // Remap the mask to 21
    pasto_estavel = pasto_estavel.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }    // If the year is between 2016 and 2023
   if (ano >= 2016) {
    if (ano <= 2023) {
     // Create a mask for stable pasture in 2014 and 2015
     var pasto_estavel1 = col7.select('classification_2014').eq(21)
                    .add(col7.select('classification_2015').eq(21))
    // Remap the mask to 21
    pasto_estavel1 = pasto_estavel1.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }    // If the year is between 2017 and 2023
   if (ano >= 2017) {
    if (ano <= 2023) {
     // Create a mask for stable pasture in 2015 and 2016
     var pasto_estavel = col7.select('classification_2015').eq(21)
                    .add(col7.select('classification_2016').eq(21))
    // Remap the mask to 21
    pasto_estavel = pasto_estavel.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }    // If the year is between 2018 and 2023
   if (ano >= 2018) {
    if (ano <= 2023) {
     // Create a mask for stable pasture in 2016 and 2017
     var pasto_estavel1 = col7.select('classification_2016').eq(21)
                    .add(col7.select('classification_2017').eq(21))
    // Remap the mask to 21
    pasto_estavel1 = pasto_estavel1.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }    // If the year is between 2019 and 2023
   if (ano >= 2019) {
    if (ano <= 2023) {
     // Create a mask for stable pasture in 2017 and 2018
     var pasto_estavel = col7.select('classification_2017').eq(21)
                    .add(col7.select('classification_2018').eq(21))
    // Remap the mask to 21
    pasto_estavel = pasto_estavel.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }    // If the year is between 2020 and 2023
   if (ano >= 2020) {
    if (ano <= 2023) {
     // Create a mask for stable pasture in 2018 and 2019
     var pasto_estavel1 = col7.select('classification_2018').eq(21)
                    .add(col7.select('classification_2019').eq(21))
    // Remap the mask to 21
    pasto_estavel1 = pasto_estavel1.remap([2],[21])
    // Blend the original classification band with the stable pasture masks
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }    
  
   if (ano >= 2021) {
    if (ano <= 2023) {
     var pasto_estavel = col7.select('classification_2019').eq(21)
                    .add(col7.select('classification_2020').eq(21))
    pasto_estavel = pasto_estavel.remap([2],[21])
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  } 
  if (ano >= 2022) {
    if (ano <= 2023) {
     var pasto_estavel = col7.select('classification_2020').eq(21)
                    .add(col7.select('classification_2021').eq(21))
    pasto_estavel = pasto_estavel.remap([2],[21])
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }  
if (ano >= 2023) {
    if (ano <= 2023) {
     var pasto_estavel = col7.select('classification_2021').eq(21)
                    .add(col7.select('classification_2022').eq(21))
    pasto_estavel = pasto_estavel.remap([2],[21])
    class_corr = class_ano.blend(pasto_estavel).blend(pasto_estavel1)
    }
  }  
  
  if (i_ano == 0){ var class_outTotal4 = class_corr}  
  else {class_outTotal4 = class_outTotal4.addBands(class_corr)}
 var mosaicoTotal = ee.ImageCollection(asset_mosaicos_col9)
                        .filterMetadata('biome', 'equals', 'PANTANAL')
                        .filterMetadata('year', 'equals', ano)
 //                       .filter(ee.Filter.eq('satellite', asset1))
                        //.filterBounds(geometry)
                        .mosaic()
//Map.addLayer(mosaicoTotal, {bands: ['swir1_median', 'nir_median', 'red_median'],gain: [0.08, 0.06, 0.2],gamma: 0.85}, 'mosaico '+ano,false) 
//Map.addLayer(col7.select(['classification_'+ano]),vis,'original '+ano,false)
//
//Map.addLayer(class_outTotal4.select(['classification_'+ano]),vis,'corrigido '+ano,false)
//Map.addLayer(saida_ano,vis,'corrigido '+ano,false)

}

////////////////////INCREMENTO ACRIGULTURA

//var col8 = ee.Image('projects/mapbiomas-workspace/COLECAO8/classificacao-pantanal/PANT_col8_Anual_p19b_v31')
// Assign the corrected classification image to the variable 'imagem'
var imagem =  class_outTotal4

// Define the asset path for the mosaics
var asset_mosaicos_col9 = 'projects/nexgenmap/MapBiomas2/LANDSAT/BRAZIL/mosaics-2';


// Load the biomes image and mask the Pantanal biome
var biomes = ee.Image('projects/mapbiomas-workspace/AUXILIAR/biomas-raster-41');
var bioma250mil_PANT = biomes.mask(biomes.eq(3));
// Add the Pantanal biome layer to the map
Map.addLayer(bioma250mil_PANT,{},'Bioma',false);


// Set the starting year
var ano = 1986
// Create a mask for agriculture in the previous year
var maskagro = imagem.select('classification_1985').eq(19).remap([1],[19])
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask1986 = imagem.select('classification_'+ (ano)).neq(19)
               .and(imagem.select('classification_'+ (ano - 1)).eq(19))

// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask1986 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask1986)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask1986)
// Blend the mask with the original classification for the current year
var pasto1986 = imagem_ano.blend(maskagro)



// Set the starting year
var ano = 1987
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask1987 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto1986.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask1987 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask1987)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask1987)
// Blend the mask with the original classification for the current year
var pasto1987 = imagem_ano.blend(maskagro)


// Set the starting year
var ano = 1988
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask1988 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto1987.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask1988 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask1988)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask1988)
// Blend the mask with the original classification for the current year
var pasto1988 = imagem_ano.blend(maskagro)

// Set the starting year
var ano = 1989
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask1989 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto1988.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask1989 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask1989)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask1989)
// Blend the mask with the original classification for the current year
var pasto1989 = imagem_ano.blend(maskagro)


// Set the starting year
var ano = 1990
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask1990 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto1989.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask1990 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask1990)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask1990)
// Blend the mask with the original classification for the current year
var pasto1990 = imagem_ano.blend(maskagro)


// Set the starting year
var ano = 1991
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask1991 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto1990.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask1991 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask1991)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask1991)
// Blend the mask with the original classification for the current year
var pasto1991 = imagem_ano.blend(maskagro)


// Set the starting year
var ano = 1992
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask1992 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto1991.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask1992 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask1992)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask1992)
// Blend the mask with the original classification for the current year
var pasto1992 = imagem_ano.blend(maskagro)


// Set the starting year
var ano = 1993
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask1993 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto1992.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask1993 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask1993)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask1993)
// Blend the mask with the original classification for the current year
var pasto1993 = imagem_ano.blend(maskagro)



// Set the starting year
var ano = 1994
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask1994 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto1993.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask1994 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask1994)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask1994)
// Blend the mask with the original classification for the current year
var pasto1994 = imagem_ano.blend(maskagro)



// Set the starting year
var ano = 1995
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask1995 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto1994.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask1995 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask1995)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask1995)
// Blend the mask with the original classification for the current year
var pasto1995 = imagem_ano.blend(maskagro)



// Set the starting year
var ano = 1996
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask1996 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto1995.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask1996 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask1996)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask1996)
// Blend the mask with the original classification for the current year
var pasto1996 = imagem_ano.blend(maskagro)



// Set the starting year
var ano = 1997
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask1997 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto1996.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask1997 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask1997)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask1997)
// Blend the mask with the original classification for the current year
var pasto1997 = imagem_ano.blend(maskagro)


// Set the starting year
var ano = 1998
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask1998 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto1997.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask1998 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask1998)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask1998)
// Blend the mask with the original classification for the current year
var pasto1998 = imagem_ano.blend(maskagro)


// Set the starting year
var ano = 1999
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask1999 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto1998.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask1999 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask1999)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask1999)
// Blend the mask with the original classification for the current year
var pasto1999 = imagem_ano.blend(maskagro)


// Set the starting year
var ano = 2000
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask2000 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto1999.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask2000 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask2000)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask2000)
// Blend the mask with the original classification for the current year
var pasto2000 = imagem_ano.blend(maskagro)



// Set the starting year
var ano = 2001
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask2001 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto2000.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask2001 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask2001)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask2001)
// Blend the mask with the original classification for the current year
var pasto2001 = imagem_ano.blend(maskagro)



// Set the starting year
var ano = 2002
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask2002 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto2001.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask2002 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask2002)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask2002)
// Blend the mask with the original classification for the current year
var pasto2002 = imagem_ano.blend(maskagro)



// Set the starting year
var ano = 2003
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask2003 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto2002.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask2003 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask2003)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask2003)
// Blend the mask with the original classification for the current year
var pasto2003 = imagem_ano.blend(maskagro)




// Set the starting year
var ano = 2004
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask2004 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto2003.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask2004 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask2004)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask2004)
// Blend the mask with the original classification for the current year
var pasto2004 = imagem_ano.blend(maskagro)




// Set the starting year
var ano = 2005
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask2005 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto2004.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask2005 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask2005)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask2005)
// Blend the mask with the original classification for the current year
var pasto2005 = imagem_ano.blend(maskagro)



// Set the starting year
var ano = 2006
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask2006 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto2005.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask2006 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask2006)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask2006)
// Blend the mask with the original classification for the current year
var pasto2006 = imagem_ano.blend(maskagro)




// Set the starting year
var ano = 2007
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask2007 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto2006.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask2007 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask2007)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask2007)
// Blend the mask with the original classification for the current year
var pasto2007 = imagem_ano.blend(maskagro)




// Set the starting year
var ano = 2008
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask2008 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto2007.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask2008 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask2008)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask2008)
// Blend the mask with the original classification for the current year
var pasto2008 = imagem_ano.blend(maskagro)



// Set the starting year
var ano = 2009
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask2009 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto2008.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask2009 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask2009)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask2009)
// Blend the mask with the original classification for the current year
var pasto2009 = imagem_ano.blend(maskagro)



// Set the starting year
var ano = 2010
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask2010 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto2009.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask2010 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask2010)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask2010)
// Blend the mask with the original classification for the current year
var pasto2010 = imagem_ano.blend(maskagro)



// Set the starting year
var ano = 2011
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask2011 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto2010.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask2011 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask2011)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask2011)
// Blend the mask with the original classification for the current year
var pasto2011 = imagem_ano.blend(maskagro)



// Set the starting year
var ano = 2012
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask2012 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto2011.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask2012 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask2012)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask2012)
// Blend the mask with the original classification for the current year
var pasto2012 = imagem_ano.blend(maskagro)



// Set the starting year
var ano = 2013
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask2013 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto2012.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask2013 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask2013)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask2013)
// Blend the mask with the original classification for the current year
var pasto2013 = imagem_ano.blend(maskagro)



// Set the starting year
var ano = 2014
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask2014 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto2013.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask2014 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask2014)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask2014)
// Blend the mask with the original classification for the current year
var pasto2014 = imagem_ano.blend(maskagro)



// Set the starting year
var ano = 2015
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask2015 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto2014.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask2015 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask2015)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask2015)
// Blend the mask with the original classification for the current year
var pasto2015 = imagem_ano.blend(maskagro)



// Set the starting year
var ano = 2016
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask2016 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto2015.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask2016 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask2016)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask2016)
// Blend the mask with the original classification for the current year
var pasto2016 = imagem_ano.blend(maskagro)


// Set the starting year
var ano = 2017
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year
var  mask2017 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto2016.eq(19))
// Remap the pixels that were not agriculture in the current year but were in the previous year to agriculture
mask2017 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask2017)
// Blend the masks for agriculture in the previous year and the current year
maskagro = maskagro.blend(mask2017)
// Blend the mask with the original classification for the current year
var pasto2017 = imagem_ano.blend(maskagro)




// Set the starting year
var ano = 2018
// Select the classification for the current year
var imagem_ano = imagem.select('classification_'+ (ano))
// Create a mask for pixels that were not agriculture in the current year but were in the previous year

var  mask2018 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto2017.eq(19))
mask2018 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask2018)
maskagro = maskagro.blend(mask2018)
var pasto2018 = imagem_ano.blend(maskagro)




var ano = 2019
var imagem_ano = imagem.select('classification_'+ (ano))
var  mask2019 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto2018.eq(19))
mask2019 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask2019)
maskagro = maskagro.blend(mask2019)
var pasto2019 = imagem_ano.blend(maskagro)




var ano = 2020
var imagem_ano = imagem.select('classification_'+ (ano))
var  mask2020 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto2019.eq(19))
mask2020 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask2020)
maskagro = maskagro.blend(mask2020)
var pasto2020 = imagem_ano.blend(maskagro)



var ano = 2021
var imagem_ano = imagem.select('classification_'+ (ano))
var  mask2021 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto2020.eq(19))
mask2021 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask2021)
maskagro = maskagro.blend(mask2021)
var pasto2021 = imagem_ano.blend(maskagro)


var ano = 2022
var imagem_ano = imagem.select('classification_'+ (ano))
var  mask2022 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto2021.eq(19))
mask2022 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask2022)
maskagro = maskagro.blend(mask2022)
var pasto2022 = imagem_ano.blend(maskagro)


var ano = 2023
var imagem_ano = imagem.select('classification_'+ (ano))
var  mask2023 = imagem.select('classification_'+ (ano)).neq(19)
               .and(pasto2022.eq(19))
mask2023 = imagem_ano.remap([3,4,11,12,19,21,33],[19,19,19,19,19,19,19]).updateMask(mask2023)
maskagro = maskagro.blend(mask2023)
var pasto2023 = imagem_ano.blend(maskagro)



var pasto_corrigido = imagem.select('classification_1985').addBands(pasto1986)
                                                          .addBands(pasto1987)
                                                          .addBands(pasto1988)
                                                          .addBands(pasto1989)
                                                          .addBands(pasto1990)
                                                          .addBands(pasto1991)
                                                          .addBands(pasto1992)
                                                          .addBands(pasto1993)
                                                          .addBands(pasto1994)
                                                          .addBands(pasto1995)
                                                          .addBands(pasto1996)
                                                          .addBands(pasto1997)
                                                          .addBands(pasto1998)
                                                          .addBands(pasto1999)
                                                          .addBands(pasto2000)
                                                          .addBands(pasto2001)
                                                          .addBands(pasto2002)
                                                          .addBands(pasto2003)
                                                          .addBands(pasto2004)
                                                          .addBands(pasto2005)
                                                          .addBands(pasto2006)
                                                          .addBands(pasto2007)
                                                          .addBands(pasto2008)
                                                          .addBands(pasto2009)
                                                          .addBands(pasto2010)
                                                          .addBands(pasto2011)
                                                          .addBands(pasto2012)
                                                          .addBands(pasto2013)
                                                          .addBands(pasto2014)
                                                          .addBands(pasto2015)
                                                          .addBands(pasto2016)
                                                          .addBands(pasto2017)
                                                          .addBands(pasto2018)
                                                          .addBands(pasto2019)
                                                          .addBands(pasto2020)
                                                          .addBands(pasto2021)
                                                          .addBands(pasto2022)
                                                          .addBands(pasto2023)
                                                          
print('final',pasto_corrigido)

///add wetland areas 

// Load the collection 9 image
var col9 =  pasto_corrigido
// Add the collection 9 image to the map
Map.addLayer(col9,{},'coleção',false)

// Import the palettes module
var palettes = require('users/mapbiomas/modules:Palettes.js');
// Define the visualization parameters for the classification
var vis = {
    'min': 0,
    'max': 45,
    'palette': palettes.get('classification5')
};


// FILTRO TEMPORAL PASTAGEM 

// Define the list of years
var anos = [
            1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,
            2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,
            2012, 2013,2014,2015,2016,2017,2018,2019,2020,2021,2022
            ];

// Initialize the output image with the classification for 1985 and 2023
var class_outTotal2 = col9.select('classification_1985').addBands(col9.select('classification_2023'))
// Loop through the years
for (var i_ano=0;i_ano<anos.length; i_ano++){
  // Get the current year
  var ano = anos[i_ano];

  // Create a mask for pixels that were pasture in the previous and next year but not in the current year
  var to_mask_camp = col9.select('classification_'+(ano-1)).eq(21)
                .and(col9.select('classification_'+ano).neq(21))
                .and(col9.select('classification_'+(ano+1)).eq(21)).remap([1],[100],0).toByte().selfMask()    


  // Add the mask to the classification for the current year
  var class_corr_campv_ano = col9.select('classification_'+ano).add(to_mask_camp)
                         .remap([3,4,12,19,21,22,25,33,103,104,112,119,121,122,125,133],
                                [3,4,12,19,21,22,25,33, 21,  21,21,21, 21, 21, 21, 21])


  //Map.addLayer(class_corr_sav_ano,vis,'teste')



  // Blend the masked classification with the original classification for the current year
  var saida_ano = col9.select('classification_'+ano).blend(class_corr_campv_ano.rename('classification_'+ano))

  // Load the mosaic for the current year
  var mosaicoTotal = ee.ImageCollection(asset_mosaicos_col8)
                        .filterMetadata('biome', 'equals', 'PANTANAL')
                        .filterMetadata('year', 'equals', ano)
 //                       .filter(ee.Filter.eq('satellite', asset1))
                        //.filterBounds(geometry)
                        .mosaic()
  // Add the mosaic to the map
  //Map.addLayer(mosaicoTotal, {bands: ['swir1_median', 'nir_median', 'red_median'],gain: [0.08, 0.06, 0.2],gamma: 0.85}, 'mosaico '+ano,false) 
  //Map.addLayer(class_outTotal.select(['classification_'+ano]),vis,'Original 2 '+ano,false)
  //Map.addLayer(saida_ano,vis,'corrigido '+ano,false)

  // If it's the first year, initialize the output image
  if (i_ano == 0){ var class_outTotal3 = saida_ano.addBands(class_outTotal2)}  
  // Otherwise, add the corrected classification to the output image
  else {class_outTotal3 = class_outTotal3.addBands(saida_ano)}
}



// Assign the output image to the variable 'col9'
var col9 = class_outTotal3

// Load the images for the frequency of flooded areas
var alag_max_11 = ee.Image('projects/mapbiomas-workspace/AMOSTRAS/col8/PANTANAL/SAMPLES/mensal/frequencia_11_v3').clip(geometry)//.set('version', version_out)
var alag_max_33 = ee.Image('projects/mapbiomas-workspace/AMOSTRAS/col8/PANTANAL/SAMPLES/mensal/frequencia_33_v3').clip(geometry)//.clip(geometry)//.set('version', version_out)
print(alag_max_11)
print(alag_max_33)

// Import the palettes module
var palettes = require('users/mapbiomas/modules:Palettes.js');
// Define the visualization parameters for the classification
var vis = {
    'min': 0,
    'max': 45,
    'palette': palettes.get('classification5')
};
// Define the visualization parameters for the classification
var vis2 = {
    'bands': 'classification_1986',
    'min': 0,
    'max': 45,
    'palette': palettes.get('classification5')
};


// Define the list of years
var anos = ['1985','1986','1987','1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000','2001','2002','2003','2004',
            '2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015','2016','2017','2018','2019','2020','2021','2022','2023'];
//var anos = ['1986','1987'];

// Loop through the years
for (var i_ano=0;i_ano<anos.length; i_ano++){  
  // Get the current year
  var ano = anos[i_ano]; 
  // Create a mask for the current year
  var campo_ano = col9.select('classification_'+ano).mask(col9.select('classification_'+ano).eq(12)).selfMask()
  // Load the mosaic for the current year
  var mosaicoTotal = ee.ImageCollection(asset_mosaicos_col8)
                        .filterMetadata('biome', 'equals', 'PANTANAL')
                        .filterMetadata('year', 'equals', ee.Number.expression(ano))
 //                       .filter(ee.Filter.eq('satellite', asset1))
                        .filterBounds(geometry)
                        .mosaic()
  // Add the mosaic to the map
  Map.addLayer(mosaicoTotal, {bands: ['swir1_median_wet', 'nir_median_wet', 'red_median_wet'],gain: [0.08, 0.06, 0.2],gamma: 0.85}, 'mosaico umido'+ ano, false) 

  // Add the classification for the current year to the map
  Map.addLayer(col9.select('classification_'+ano), vis, 'class_ano_'+ano, false);
  //Map.addLayer(campo_ano, vis, 'campo+pasto_ano '+ano, false);

  // Create a mask for flooded areas in the current year
  var alag_ano = alag_max_11.select('freq_'+ano).gt(1).mask(campo_ano).selfMask().remap([ 1],[11]).rename('classification_'+ano)
  //print('alag_ano',alag_ano)
  //Map.addLayer(alag_ano, {min:1, max: 12, palette: ['45C2A5']}, 'campoAlag_ano '+ano, false);
  // Create a mask for water areas in the current year
  var class_agua_ano = alag_max_33.select('freq_'+ano).gt(1).remap([ 1],[33]).rename('classification_'+ano)
  // Map.addLayer(class_agua_ano, {min:1, max: 12, palette: ['blue']}, 'agua_ano '+ano, false);
  // Blend the masks with the original classification for the current year
  var saida_ano = col9.select('classification_'+ano).blend(alag_ano.selfMask()).blend(class_agua_ano.selfMask())
  // Add the blended classification to the map
  Map.addLayer(saida_ano, vis, 'saida_ano '+ano, false);
  // print('teste saída', saida_ano)
  // If it's the first year, initialize the output image
  if (i_ano == 0){ var class_outTotal5 = saida_ano }  
  // Otherwise, add the corrected classification to the output image
  else {class_outTotal5 = class_outTotal5.addBands(saida_ano); }
}

// Add the classification image to the map
Map.addLayer(col9, vis2, 'col9', false);

// Add the filtered classification image to the map
Map.addLayer(class_outTotal5, vis2, 'filtered',false);

          
// Assign the filtered classification image to the variable 'col9'
var col9 = class_outTotal5

print(col9)

// Create a mask for flooded areas in 1987
var mask = col9.select('classification_1987').eq(11).remap([1],[100],0).toByte().selfMask()

// Add the mask to the map
Map.addLayer(mask)


// Add the mask to the classification for 1985
var class_ano = col9.select('classification_1985').add(mask)
                         .remap([3,4,11,12,21,19,22,25,33,103,104,111,112,119,121,122,125,133],
                                [3,4,11,12,21,19,22,25,33,  3,  4, 11, 11, 19, 21, 22, 25, 33])
                                
// Import the palettes module
var palettes = require('users/mapbiomas/modules:Palettes.js');
// Define the visualization parameters for the classification
var vis = {
    'min': 0,
    'max': 62,
    'palette': palettes.get('classification7')
};

// Add the classification image to the map
Map.addLayer(class_ano, vis, 'teste')



// Blend the masked classification with the original classification for 1985
var corrigido_ano = col9.select('classification_1985').blend(class_ano.rename('classification_1985'))

print(corrigido_ano)


// Define the asset path for the mosaics
var asset_mosaicos_col8 = 'projects/nexgenmap/MapBiomas2/LANDSAT/BRAZIL/mosaics-2';
// Load the mosaic for 1985
var mosaicoTotal = ee.ImageCollection(asset_mosaicos_col8)
                        .filterMetadata('biome', 'equals', 'PANTANAL')
                        .filterMetadata('year', 'equals', 1985)
 //                       .filter(ee.Filter.eq('satellite', asset1))
                        //.filterBounds(geometry)
                        .mosaic()
// Add the mosaic to the map
Map.addLayer(mosaicoTotal, {bands: ['swir1_median_wet', 'nir_median_wet', 'red_median_wet'],gain: [0.08, 0.06, 0.2],gamma: 0.85}, 'mosaico ',false) 



// Add the original classification for 1985 to the map
Map.addLayer(col9.select('classification_1985'),vis, 'original')
// Add the corrected classification for 1985 to the map
Map.addLayer(corrigido_ano.select('classification_1985'),vis, 'corrigido')





// Define the list of band names
var bandNames =  [//'classification_1985',
                  'classification_1986',
                  'classification_1987',
                  'classification_1988',
                  'classification_1989',
                  'classification_1990',
                  'classification_1991','classification_1992',
                  'classification_1993',
                  'classification_1994',
                  'classification_1995',
                  'classification_1996',
                  'classification_1997',
                  'classification_1998',
                  'classification_1999','classification_2000',
                  'classification_2001','classification_2002','classification_2003','classification_2004',
                  'classification_2005','classification_2006','classification_2007','classification_2008',
                  'classification_2009','classification_2010','classification_2011','classification_2012',
                  'classification_2013','classification_2014','classification_2015','classification_2016',
                  'classification_2017','classification_2018','classification_2019','classification_2020',
                  'classification_2021','classification_2022','classification_2023']



// Select the bands and add the corrected classification for 1985
var exportar = col9.select(bandNames).addBands(corrigido_ano).toByte()

var vesion_in = '00'
var version_out = 'p03k_v02';
var descricao = 'Filtro inclui area umida'
var col = 9.0
var prefixo_in = 'PANT_col9_Anual_'
var prefixo_out = 'PANT_col9_Anual_'
var dirout = 'projects/mapbiomas-workspace/COLECAO9/classificacao-pantanal/';

// Set the metadata for the output image
exportar = exportar
.set('territory', 'PANTANAL')
.set('biome', 'PANTANAL')
.set('source', 'arcplan')
.set('version', version_out)
.set('year', version_out)
.set('collection_id', col)
.set('description', descricao)


  print('Final exportação:',exportar)
  // Export the image to an asset
  Export.image.toAsset({
    "image": exportar.toByte(),
    "description": prefixo_out+version_out,
    "assetId": dirout + prefixo_out+version_out,
    "scale": 30,
    "pyramidingPolicy": {
        '.default': 'mode'
    },
    "maxPixels": 1e13,
    "region": geometry
  });    


