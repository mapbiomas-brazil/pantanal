/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-58.52936205752952, -16.48069309590335],
          [-58.57330737002952, -17.101247170160555],
          [-58.32062182315452, -17.478882098612424],
          [-57.96905932315452, -17.656938725904308],
          [-57.77130541690452, -17.897558502926692],
          [-57.67242846377952, -18.273525077010646],
          [-57.94708666690452, -19.23060191352147],
          [-58.24371752627952, -19.71741814896459],
          [-58.29864916690452, -20.274912605306977],
          [-57.99103197940452, -20.96383809400686],
          [-58.07892260440452, -21.578107423128746],
          [-58.10089526065452, -22.230467998199895],
          [-57.41974291690452, -22.26097380469566],
          [-57.32086596377952, -21.88427321684344],
          [-57.11212572940452, -21.49635339908078],
          [-56.98028979190452, -21.056141489602602],
          [-56.82648119815452, -20.45000902167834],
          [-56.38702807315452, -20.48088774020802],
          [-55.89264330752952, -20.50147010055191],
          [-55.65094408877952, -20.50147010055191],
          [-55.10162768252952, -19.44829624235093],
          [-54.68414721377952, -18.482045076276716],
          [-54.68414721377952, -17.792981029318906],
          [-54.80499682315452, -17.048736849002278],
          [-54.82696947940452, -16.522828344097242],
          [-55.06866869815452, -16.217140881812828],
          [-55.50812182315452, -15.847575770994556],
          [-56.00250658877952, -15.604348700492018],
          [-56.71661791690452, -15.93210807445483],
          [-57.29889330752952, -15.805296326997492],
          [-57.95807299502952, -15.535558114006925],
          [-58.973632404627836, -15.897400514355134],
          [-59.290155580858844, -16.315729569211467]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// GAP FILL FILTER TO REMOVE NON OBSERVED DATA //

// set output file
var vesion_in = '4';
var version_out = '6';
var descricao = 'GAP fill and firts years corrections';
var col = 8.0;
var prefixo_in = 'PANT_col8_Anual_p09_v';
var prefixo_out = 'PANT_col8_Anual_p10a_v';
var dirout = 'projects/mapbiomas-workspace/COLECAO8/classificacao-pantanal/';

//set auxiliar variables and asset
var ano = 1987;
var bioma = "PANTANAL";
var biomes = ee.Image('projects/mapbiomas-workspace/AUXILIAR/biomas-raster-41');
var bioma250mil_PANT = biomes.mask(biomes.eq(3));
var image = ee.Image('projects/mapbiomas-workspace/COLECAO8/classificacao-pantanal/PANT_col8_Anual_p08b_v4');
var asset_mosaicos_col8 = 'projects/nexgenmap/MapBiomas2/LANDSAT/BRAZIL/mosaics-2';

////*************************************************************
// Do not Change from these lines
////*************************************************************

var VeightConnected = true;

var palettes = require('users/mapbiomas/modules:Palettes.js');
var vis = {
    'min': 0,
    'max': 62,
    'palette': palettes.get('classification7')
};

image = image.mask(image.neq(0));
// print(image)
var years = [
    1985, 1986, 1987, 1988,
    1989, 1990, 1991, 1992,
    1993, 1994, 1995, 1996,
    1997, 1998, 1999, 2000,
    2001, 2002, 2003, 2004,
    2005, 2006, 2007, 2008,
    2009, 2010, 2011, 2012,
    2013, 2014, 2015, 2016,
    2017, 2018, 2019, 2020,2021,2022];

/**
 * User defined functions
 */
var applyGapFill = function (image) {

    // apply the gap fill form t0 until tn
    var imageFilledt0tn = bandNames.slice(1)
        .iterate(
            function (bandName, previousImage) {

                var currentImage = image.select(ee.String(bandName));

                previousImage = ee.Image(previousImage);

                currentImage = currentImage.unmask(
                    previousImage.select([0]));

                return currentImage.addBands(previousImage);

            }, ee.Image(imageAllBands.select([bandNames.get(0)]))
        );

    imageFilledt0tn = ee.Image(imageFilledt0tn);

    // apply the gap fill form tn until t0
    var bandNamesReversed = bandNames.reverse();

    var imageFilledtnt0 = bandNamesReversed.slice(1)
        .iterate(
            function (bandName, previousImage) {

                var currentImage = imageFilledt0tn.select(ee.String(bandName));

                previousImage = ee.Image(previousImage);

                currentImage = currentImage.unmask(
                    previousImage.select(previousImage.bandNames().length().subtract(1)));

                return previousImage.addBands(currentImage);

            }, ee.Image(imageFilledt0tn.select([bandNamesReversed.get(0)]))
        );


    imageFilledtnt0 = ee.Image(imageFilledtnt0).select(bandNames);

    return imageFilledtnt0;
};

// get band names list 
var bandNames = ee.List(
    years.map(
        function (year) {
            return 'classification_' + String(year);
        }
    )
);
// generate a histogram dictionary of [bandNames, image.bandNames()]
var bandsOccurrence = ee.Dictionary(
    bandNames.cat(image.bandNames()).reduce(ee.Reducer.frequencyHistogram())
);

print(bandsOccurrence);

// insert a masked band 
var bandsDictionary = bandsOccurrence.map(
    function (key, value) {
        return ee.Image(
            ee.Algorithms.If(
                ee.Number(value).eq(2),
                image.select([key]).byte(),
                ee.Image().rename([key]).byte().updateMask(image.select(0))
            )
        );
    }
);

// convert dictionary to image
var imageAllBands = ee.Image(
    bandNames.iterate(
        function (band, image) {
            return ee.Image(image).addBands(bandsDictionary.get(ee.String(band)));
        },
        ee.Image().select()
    )
);

// generate image pixel years
var imagePixelYear = ee.Image.constant(years)
    .updateMask(imageAllBands)
    .rename(bandNames);

// apply the gap fill
var imageFilledtnt0 = applyGapFill(imageAllBands);
//

Map.addLayer(image.select('classification_'+ano), vis, 'image',false);
Map.addLayer(imageFilledtnt0.select('classification_'+ano), vis, 'filtered');
print(imageFilledtnt0);

// CORRECTIONS ON LANDSAT 5 CLASSIFICATION NOISE //

// years with problems on mosaic:
 var anos = [
            1985, 1987,
            1990,1993,
            1995,1998
            ];
var col8 = imageFilledtnt0

for (var i_ano=0;i_ano<anos.length; i_ano++){
  var ano = anos[i_ano];

var to_mask_anodepois_sav = col8.select(['classification_'+(ano+1)]).eq(4).remap([1],[100],0).toByte().selfMask();  

 var class_corr_sav_ano = col8.select('classification_'+ano).add(to_mask_anodepois_sav)
                         .remap([3,4,12,21,22,25,33,103,104,112,121,122,125,133],
                                [3,4,12,21,22,25,33, 3,  4, 4, 4, 22, 25, 33]);

var corrigidosavana_ano = col8.select('classification_'+ano).blend(class_corr_sav_ano.rename('classification_'+ano));

var to_mask_anodepois_flo = col8.select(['classification_'+(ano+1)]).eq(3).remap([1],[100],0).toByte().selfMask();  

 var class_corr_flo_ano = col8.select('classification_'+ano).add(to_mask_anodepois_flo)
                         .remap([3,4,12,21,22,25,33,103,104,112,121,122,125,133],
                                [3,4,12,21,22,25,33, 3, 3 , 3, 3, 22, 25, 33]);

var corrigidofloresta_ano = col8.select('classification_'+ano).blend(class_corr_flo_ano.rename('classification_'+ano));


var to_mask_anodepois_camp = col8.select(['classification_'+(ano+1)]).eq(12).remap([1],[100],0).toByte().selfMask();  

 var class_corr_camp_ano = col8.select('classification_'+ano).add(to_mask_anodepois_camp)
                         .remap([3,4,12,21,22,25,33,103,104,112,121,122,125,133],
                                [3,4,12,21,22,25,33,  3,  4 , 12, 12, 22, 25, 33]);

var corrigidocampestre_ano = col8.select('classification_'+ano).blend(class_corr_camp_ano.rename('classification_'+ano));


var corrigidoano = col8.select('classification_'+ano).blend(class_corr_camp_ano.rename('classification_'+ano)
                    .blend(class_corr_sav_ano.rename('classification_'+ano).blend(class_corr_flo_ano.rename('classification_'+ano))));

print('final '+ano,corrigidoano);


  var mosaicoTotal = ee.ImageCollection(asset_mosaicos_col8)
                        .filterMetadata('biome', 'equals', 'PANTANAL')
                        .filterMetadata('year', 'equals', ano)
                        .mosaic();

Map.addLayer(mosaicoTotal, {bands: ['swir1_median', 'nir_median', 'red_median'],gain: [0.08, 0.06, 0.2],gamma: 0.85}, 'mosaico '+ano,false); 
Map.addLayer(col8.select(['classification_'+ano]),vis,'Original '+ano,false);

Map.addLayer(class_corr_sav_ano,vis,'mascara savana '+ano,false);
Map.addLayer(class_corr_flo_ano,vis,'mascara floresta '+ano,false);
Map.addLayer(class_corr_camp_ano,vis,'mascara campestre '+ano,false);

Map.addLayer(corrigidoano.select(['classification_'+ano]),vis,'Corrigido '+ano,false);

Map.addLayer(col8.select('classification_'+(ano+1)),vis,'Original '+(ano+1),false);

 if (i_ano === 0){ var corrigido = corrigidoano}  
  else {corrigido = corrigido.addBands(corrigidoano); }
}

print(corrigido);

var bandNames =  ['classification_1986','classification_1988','classification_1989',
                  'classification_1991','classification_1992','classification_1994',
                  'classification_1996','classification_1997','classification_1999',
                  'classification_2000','classification_2001','classification_2002',
                  'classification_2003','classification_2004','classification_2005',
                  'classification_2006','classification_2007','classification_2008',
                  'classification_2009','classification_2010','classification_2011',
                  'classification_2012','classification_2013','classification_2014',
                  'classification_2015','classification_2016','classification_2017',
                  'classification_2018','classification_2019','classification_2020',
                  'classification_2021','classification_2022'];

var exportar = col8.select(bandNames).addBands(corrigido).toByte();

//set outuput file
exportar = exportar
.set('territory', 'PANTANAL')
.set('biome', 'PANTANAL')
.set('source', 'arcplan')
.set('version', version_out)
.set('year', version_out)
.set('collection_id', col)
.set('description', descricao);

print('Final exportação:',exportar);

// export classification
Export.image.toAsset({
  "image": exportar,
  "description": prefixo_out+version_out,
  "assetId": dirout + prefixo_out+version_out,
  "scale": 30,
  "pyramidingPolicy": {
      '.default': 'mode'
  },
  "maxPixels": 1e13,
  "region": geometry
});    
  
//Marcos Rosa, Eduardo Rosa, Mariana Dias
//Updated Jul 13, 2023 - MD - mariana@arcplan.com.br